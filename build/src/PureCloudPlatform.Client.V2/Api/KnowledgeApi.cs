using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;

namespace PureCloudPlatform.Client.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKnowledgeApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Delete knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>KnowledgeBase</returns>
        
        KnowledgeBase DeleteKnowledgeKnowledgebase (string knowledgeBaseId);

        /// <summary>
        /// Delete knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        ApiResponse<KnowledgeBase> DeleteKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>CategoryResponse</returns>
        
        CategoryResponse DeleteKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        ApiResponse<CategoryResponse> DeleteKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Delete document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns></returns>
        
        void DeleteKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId);

        /// <summary>
        /// Delete document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> DeleteKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId);

        /// <summary>
        /// Delete a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns></returns>
        
        void DeleteKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId);

        /// <summary>
        /// Delete a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> DeleteKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId);

        /// <summary>
        /// Delete export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns></returns>
        
        void DeleteKnowledgeKnowledgebaseExportJob (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Delete export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> DeleteKnowledgeKnowledgebaseExportJobWithHttpInfo (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Delete import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns></returns>
        
        void DeleteKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId);

        /// <summary>
        /// Delete import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> DeleteKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId);

        /// <summary>
        /// Delete label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>LabelResponse</returns>
        
        LabelResponse DeleteKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Delete label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        ApiResponse<LabelResponse> DeleteKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeCategory</returns>
        [Obsolete]
        KnowledgeCategory DeleteKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeCategory</returns>
        [Obsolete]
        ApiResponse<KnowledgeCategory> DeleteKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        KnowledgeDocument DeleteKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocument> DeleteKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Delete import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>GuestCategoryResponseListing</returns>
        
        GuestCategoryResponseListing GetKnowledgeGuestSessionCategories (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>ApiResponse of GuestCategoryResponseListing</returns>
        
        ApiResponse<GuestCategoryResponseListing> GetKnowledgeGuestSessionCategoriesWithHttpInfo (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get a knowledge document by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>KnowledgeGuestDocumentResponse</returns>
        
        KnowledgeGuestDocumentResponse GetKnowledgeGuestSessionDocument (string sessionId, string documentId);

        /// <summary>
        /// Get a knowledge document by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentResponse</returns>
        
        ApiResponse<KnowledgeGuestDocumentResponse> GetKnowledgeGuestSessionDocumentWithHttpInfo (string sessionId, string documentId);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>KnowledgeGuestDocumentResponseListing</returns>
        
        KnowledgeGuestDocumentResponseListing GetKnowledgeGuestSessionDocuments (string sessionId, List<string> categoryId = null, int? pageSize = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentResponseListing</returns>
        
        ApiResponse<KnowledgeGuestDocumentResponseListing> GetKnowledgeGuestSessionDocumentsWithHttpInfo (string sessionId, List<string> categoryId = null, int? pageSize = null);

        /// <summary>
        /// Get knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>KnowledgeBase</returns>
        
        KnowledgeBase GetKnowledgeKnowledgebase (string knowledgeBaseId);

        /// <summary>
        /// Get knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        ApiResponse<KnowledgeBase> GetKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>CategoryResponseListing</returns>
        
        CategoryResponseListing GetKnowledgeKnowledgebaseCategories (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>ApiResponse of CategoryResponseListing</returns>
        
        ApiResponse<CategoryResponseListing> GetKnowledgeKnowledgebaseCategoriesWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>CategoryResponse</returns>
        
        CategoryResponse GetKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        ApiResponse<CategoryResponse> GetKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Get document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        KnowledgeDocumentResponse GetKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null);

        /// <summary>
        /// Get document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        ApiResponse<KnowledgeDocumentResponse> GetKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null);

        /// <summary>
        /// Get a list of feedback records given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>KnowledgeDocumentFeedbackResponseListing</returns>
        
        KnowledgeDocumentFeedbackResponseListing GetKnowledgeKnowledgebaseDocumentFeedback (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null);

        /// <summary>
        /// Get a list of feedback records given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponseListing</returns>
        
        ApiResponse<KnowledgeDocumentFeedbackResponseListing> GetKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null);

        /// <summary>
        /// Get a single feedback record given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>KnowledgeDocumentFeedbackResponse</returns>
        
        KnowledgeDocumentFeedbackResponse GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId (string knowledgeBaseId, string documentId, string feedbackId);

        /// <summary>
        /// Get a single feedback record given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponse</returns>
        
        ApiResponse<KnowledgeDocumentFeedbackResponse> GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdWithHttpInfo (string knowledgeBaseId, string documentId, string feedbackId);

        /// <summary>
        /// Get a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>DocumentVariation</returns>
        
        DocumentVariation GetKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null);

        /// <summary>
        /// Get a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        ApiResponse<DocumentVariation> GetKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null);

        /// <summary>
        /// Get variations for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>DocumentVariationListing</returns>
        
        DocumentVariationListing GetKnowledgeKnowledgebaseDocumentVariations (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null);

        /// <summary>
        /// Get variations for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>ApiResponse of DocumentVariationListing</returns>
        
        ApiResponse<DocumentVariationListing> GetKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null);

        /// <summary>
        /// Get document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentVersion</returns>
        
        KnowledgeDocumentVersion GetKnowledgeKnowledgebaseDocumentVersion (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null);

        /// <summary>
        /// Get document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersion</returns>
        
        ApiResponse<KnowledgeDocumentVersion> GetKnowledgeKnowledgebaseDocumentVersionWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null);

        /// <summary>
        /// Get variation for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>KnowledgeDocumentVersionVariation</returns>
        
        KnowledgeDocumentVersionVariation GetKnowledgeKnowledgebaseDocumentVersionVariation (string knowledgeBaseId, string documentId, string versionId, string variationId);

        /// <summary>
        /// Get variation for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionVariation</returns>
        
        ApiResponse<KnowledgeDocumentVersionVariation> GetKnowledgeKnowledgebaseDocumentVersionVariationWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string variationId);

        /// <summary>
        /// Get variations for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>KnowledgeDocumentVersionVariationListing</returns>
        
        KnowledgeDocumentVersionVariationListing GetKnowledgeKnowledgebaseDocumentVersionVariations (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null);

        /// <summary>
        /// Get variations for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionVariationListing</returns>
        
        ApiResponse<KnowledgeDocumentVersionVariationListing> GetKnowledgeKnowledgebaseDocumentVersionVariationsWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null);

        /// <summary>
        /// Get document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentVersionListing</returns>
        
        KnowledgeDocumentVersionListing GetKnowledgeKnowledgebaseDocumentVersions (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null);

        /// <summary>
        /// Get document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionListing</returns>
        
        ApiResponse<KnowledgeDocumentVersionListing> GetKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentResponseListing</returns>
        
        KnowledgeDocumentResponseListing GetKnowledgeKnowledgebaseDocuments (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentResponseListing</returns>
        
        ApiResponse<KnowledgeDocumentResponseListing> GetKnowledgeKnowledgebaseDocumentsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null);

        /// <summary>
        /// Get export job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>KnowledgeExportJobResponse</returns>
        
        KnowledgeExportJobResponse GetKnowledgeKnowledgebaseExportJob (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Get export job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>ApiResponse of KnowledgeExportJobResponse</returns>
        
        ApiResponse<KnowledgeExportJobResponse> GetKnowledgeKnowledgebaseExportJobWithHttpInfo (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Get import job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        KnowledgeImportJobResponse GetKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId, List<string> expand = null);

        /// <summary>
        /// Get import job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        ApiResponse<KnowledgeImportJobResponse> GetKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId, List<string> expand = null);

        /// <summary>
        /// Get label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>LabelResponse</returns>
        
        LabelResponse GetKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Get label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        ApiResponse<LabelResponse> GetKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>LabelListing</returns>
        
        LabelListing GetKnowledgeKnowledgebaseLabels (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>ApiResponse of LabelListing</returns>
        
        ApiResponse<LabelListing> GetKnowledgeKnowledgebaseLabelsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>CategoryListing</returns>
        [Obsolete]
        CategoryListing GetKnowledgeKnowledgebaseLanguageCategories (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>ApiResponse of CategoryListing</returns>
        [Obsolete]
        ApiResponse<CategoryListing> GetKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        KnowledgeExtendedCategory GetKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        ApiResponse<KnowledgeExtendedCategory> GetKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        KnowledgeDocument GetKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocument> GetKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document content upload status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        KnowledgeDocumentContentUpload GetKnowledgeKnowledgebaseLanguageDocumentUpload (string documentId, string knowledgeBaseId, string languageCode, string uploadId);

        /// <summary>
        /// Get document content upload status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>ApiResponse of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocumentContentUpload> GetKnowledgeKnowledgebaseLanguageDocumentUploadWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, string uploadId);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>DocumentListing</returns>
        [Obsolete]
        DocumentListing GetKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>ApiResponse of DocumentListing</returns>
        [Obsolete]
        ApiResponse<DocumentListing> GetKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null);

        /// <summary>
        /// Get import operation report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        KnowledgeImport GetKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get import operation report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        ApiResponse<KnowledgeImport> GetKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get training detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        KnowledgeTraining GetKnowledgeKnowledgebaseLanguageTraining (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Get training detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        ApiResponse<KnowledgeTraining> GetKnowledgeKnowledgebaseLanguageTrainingWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Get all trainings information for a knowledgebase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>TrainingListing</returns>
        [Obsolete]
        TrainingListing GetKnowledgeKnowledgebaseLanguageTrainings (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null);

        /// <summary>
        /// Get all trainings information for a knowledgebase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>ApiResponse of TrainingListing</returns>
        [Obsolete]
        ApiResponse<TrainingListing> GetKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null);

        /// <summary>
        /// Get operations
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>OperationListing</returns>
        
        OperationListing GetKnowledgeKnowledgebaseOperations (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null);

        /// <summary>
        /// Get operations
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of OperationListing</returns>
        
        ApiResponse<OperationListing> GetKnowledgeKnowledgebaseOperationsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null);

        /// <summary>
        /// Get ids of operation creator users and oauth clients
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>OperationCreatorUserResponse</returns>
        
        OperationCreatorUserResponse GetKnowledgeKnowledgebaseOperationsUsersQuery (string knowledgeBaseId);

        /// <summary>
        /// Get ids of operation creator users and oauth clients
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of OperationCreatorUserResponse</returns>
        
        ApiResponse<OperationCreatorUserResponse> GetKnowledgeKnowledgebaseOperationsUsersQueryWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Get parse job report
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>KnowledgeParseJobResponse</returns>
        
        KnowledgeParseJobResponse GetKnowledgeKnowledgebaseParseJob (string knowledgeBaseId, string parseJobId, List<string> expand = null);

        /// <summary>
        /// Get parse job report
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>ApiResponse of KnowledgeParseJobResponse</returns>
        
        ApiResponse<KnowledgeParseJobResponse> GetKnowledgeKnowledgebaseParseJobWithHttpInfo (string knowledgeBaseId, string parseJobId, List<string> expand = null);

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredGroup</returns>
        
        UnansweredGroup GetKnowledgeKnowledgebaseUnansweredGroup (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredGroup</returns>
        
        ApiResponse<UnansweredGroup> GetKnowledgeKnowledgebaseUnansweredGroupWithHttpInfo (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredPhraseGroup</returns>
        
        UnansweredPhraseGroup GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredPhraseGroup</returns>
        
        ApiResponse<UnansweredPhraseGroup> GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredGroups</returns>
        
        UnansweredGroups GetKnowledgeKnowledgebaseUnansweredGroups (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredGroups</returns>
        
        ApiResponse<UnansweredGroups> GetKnowledgeKnowledgebaseUnansweredGroupsWithHttpInfo (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get content upload from URL job status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>GetUploadSourceUrlJobStatusResponse</returns>
        
        GetUploadSourceUrlJobStatusResponse GetKnowledgeKnowledgebaseUploadsUrlsJob (string knowledgeBaseId, string jobId);

        /// <summary>
        /// Get content upload from URL job status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>ApiResponse of GetUploadSourceUrlJobStatusResponse</returns>
        
        ApiResponse<GetUploadSourceUrlJobStatusResponse> GetKnowledgeKnowledgebaseUploadsUrlsJobWithHttpInfo (string knowledgeBaseId, string jobId);

        /// <summary>
        /// Get knowledge bases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>KnowledgeBaseListing</returns>
        
        KnowledgeBaseListing GetKnowledgeKnowledgebases (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Get knowledge bases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>ApiResponse of KnowledgeBaseListing</returns>
        
        ApiResponse<KnowledgeBaseListing> GetKnowledgeKnowledgebasesWithHttpInfo (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        void PatchKnowledgeGuestSessionDocumentsSearchSearchId (string sessionId, string searchId, SearchUpdateRequest body);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PatchKnowledgeGuestSessionDocumentsSearchSearchIdWithHttpInfo (string sessionId, string searchId, SearchUpdateRequest body);

        /// <summary>
        /// Update knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeBase</returns>
        
        KnowledgeBase PatchKnowledgeKnowledgebase (string knowledgeBaseId, KnowledgeBaseUpdateRequest body);

        /// <summary>
        /// Update knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        ApiResponse<KnowledgeBase> PatchKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId, KnowledgeBaseUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>CategoryResponse</returns>
        
        CategoryResponse PatchKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        ApiResponse<CategoryResponse> PatchKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body);

        /// <summary>
        /// Update document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        KnowledgeDocumentResponse PatchKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body);

        /// <summary>
        /// Update document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        ApiResponse<KnowledgeDocumentResponse> PatchKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body);

        /// <summary>
        /// Update a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>DocumentVariation</returns>
        
        DocumentVariation PatchKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body);

        /// <summary>
        /// Update a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        ApiResponse<DocumentVariation> PatchKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PatchKnowledgeKnowledgebaseDocumentsSearchSearchId (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdWithHttpInfo (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null);

        /// <summary>
        /// Start import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        KnowledgeImportJobResponse PatchKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId, ImportStatusRequest body);

        /// <summary>
        /// Start import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        ApiResponse<KnowledgeImportJobResponse> PatchKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId, ImportStatusRequest body);

        /// <summary>
        /// Update label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>LabelResponse</returns>
        
        LabelResponse PatchKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId, LabelUpdateRequest body);

        /// <summary>
        /// Update label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        ApiResponse<LabelResponse> PatchKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId, LabelUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        KnowledgeExtendedCategory PatchKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        ApiResponse<KnowledgeExtendedCategory> PatchKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Update document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        KnowledgeDocument PatchKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Update document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocument> PatchKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Update documents collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>DocumentListing</returns>
        [Obsolete]
        DocumentListing PatchKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body);

        /// <summary>
        /// Update documents collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentListing</returns>
        [Obsolete]
        ApiResponse<DocumentListing> PatchKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body);

        /// <summary>
        /// Start import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        KnowledgeImport PatchKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body);

        /// <summary>
        /// Start import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        ApiResponse<KnowledgeImport> PatchKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body);

        /// <summary>
        /// Send update to the parse operation
        /// </summary>
        /// <remarks>
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        void PatchKnowledgeKnowledgebaseParseJob (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body);

        /// <summary>
        /// Send update to the parse operation
        /// </summary>
        /// <remarks>
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PatchKnowledgeKnowledgebaseParseJobWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body);

        /// <summary>
        /// Update a Knowledge base unanswered phrase group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>UnansweredPhraseGroupUpdateResponse</returns>
        
        UnansweredPhraseGroupUpdateResponse PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body);

        /// <summary>
        /// Update a Knowledge base unanswered phrase group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>ApiResponse of UnansweredPhraseGroupUpdateResponse</returns>
        
        ApiResponse<UnansweredPhraseGroupUpdateResponse> PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body);

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>UploadUrlResponse</returns>
        
        UploadUrlResponse PostKnowledgeDocumentuploads (UploadUrlRequest body);

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>ApiResponse of UploadUrlResponse</returns>
        
        ApiResponse<UploadUrlResponse> PostKnowledgeDocumentuploadsWithHttpInfo (UploadUrlRequest body);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeGuestSessionDocumentCopies (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeGuestSessionDocumentCopiesWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeGuestDocumentFeedback</returns>
        
        KnowledgeGuestDocumentFeedback PostKnowledgeGuestSessionDocumentFeedback (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentFeedback</returns>
        
        ApiResponse<KnowledgeGuestDocumentFeedback> PostKnowledgeGuestSessionDocumentFeedbackWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null);

        /// <summary>
        /// Create view event for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeGuestSessionDocumentViews (string sessionId, string documentId, KnowledgeGuestDocumentView body = null);

        /// <summary>
        /// Create view event for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeGuestSessionDocumentViewsWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentView body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeGuestSessionDocumentsPresentations (string sessionId, KnowledgeGuestDocumentPresentation body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeGuestSessionDocumentsPresentationsWithHttpInfo (string sessionId, KnowledgeGuestDocumentPresentation body = null);

        /// <summary>
        /// Search the documents in a guest session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentGuestSearch</returns>
        
        KnowledgeDocumentGuestSearch PostKnowledgeGuestSessionDocumentsSearch (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null);

        /// <summary>
        /// Search the documents in a guest session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentGuestSearch</returns>
        
        ApiResponse<KnowledgeDocumentGuestSearch> PostKnowledgeGuestSessionDocumentsSearchWithHttpInfo (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeGuestDocumentSuggestion</returns>
        
        KnowledgeGuestDocumentSuggestion PostKnowledgeGuestSessionDocumentsSearchSuggestions (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentSuggestion</returns>
        
        ApiResponse<KnowledgeGuestDocumentSuggestion> PostKnowledgeGuestSessionDocumentsSearchSuggestionsWithHttpInfo (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null);

        /// <summary>
        /// Create guest session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>KnowledgeGuestSession</returns>
        
        KnowledgeGuestSession PostKnowledgeGuestSessions (KnowledgeGuestSession body);

        /// <summary>
        /// Create guest session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeGuestSession</returns>
        
        ApiResponse<KnowledgeGuestSession> PostKnowledgeGuestSessionsWithHttpInfo (KnowledgeGuestSession body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>CategoryResponse</returns>
        
        CategoryResponse PostKnowledgeKnowledgebaseCategories (string knowledgeBaseId, CategoryCreateRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        ApiResponse<CategoryResponse> PostKnowledgeKnowledgebaseCategoriesWithHttpInfo (string knowledgeBaseId, CategoryCreateRequest body);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeKnowledgebaseDocumentCopies (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentCopiesWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentFeedbackResponse</returns>
        
        KnowledgeDocumentFeedbackResponse PostKnowledgeKnowledgebaseDocumentFeedback (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponse</returns>
        
        ApiResponse<KnowledgeDocumentFeedbackResponse> PostKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null);

        /// <summary>
        /// Create a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>DocumentVariation</returns>
        
        DocumentVariation PostKnowledgeKnowledgebaseDocumentVariations (string knowledgeBaseId, string documentId, DocumentVariation body);

        /// <summary>
        /// Create a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        ApiResponse<DocumentVariation> PostKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo (string knowledgeBaseId, string documentId, DocumentVariation body);

        /// <summary>
        /// Creates or restores a document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentVersion</returns>
        
        KnowledgeDocumentVersion PostKnowledgeKnowledgebaseDocumentVersions (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body);

        /// <summary>
        /// Creates or restores a document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentVersion</returns>
        
        ApiResponse<KnowledgeDocumentVersion> PostKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body);

        /// <summary>
        /// Create view for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeKnowledgebaseDocumentViews (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null);

        /// <summary>
        /// Create view for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentViewsWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null);

        /// <summary>
        /// Create document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        KnowledgeDocumentResponse PostKnowledgeKnowledgebaseDocuments (string knowledgeBaseId, KnowledgeDocumentReq body);

        /// <summary>
        /// Create document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        ApiResponse<KnowledgeDocumentResponse> PostKnowledgeKnowledgebaseDocumentsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentReq body);

        /// <summary>
        /// Bulk remove documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        BulkResponse PostKnowledgeKnowledgebaseDocumentsBulkRemove (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body);

        /// <summary>
        /// Bulk remove documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        ApiResponse<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkRemoveWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body);

        /// <summary>
        /// Bulk update documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        BulkResponse PostKnowledgeKnowledgebaseDocumentsBulkUpdate (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body);

        /// <summary>
        /// Bulk update documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        ApiResponse<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkUpdateWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        void PostKnowledgeKnowledgebaseDocumentsPresentations (string knowledgeBaseId, KnowledgeDocumentPresentation body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentsPresentationsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentPresentation body = null);

        /// <summary>
        /// Search the documents in a knowledge base.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentSearch</returns>
        
        KnowledgeDocumentSearch PostKnowledgeKnowledgebaseDocumentsSearch (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null);

        /// <summary>
        /// Search the documents in a knowledge base.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentSearch</returns>
        
        ApiResponse<KnowledgeDocumentSearch> PostKnowledgeKnowledgebaseDocumentsSearchWithHttpInfo (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentSuggestion</returns>
        
        KnowledgeDocumentSuggestion PostKnowledgeKnowledgebaseDocumentsSearchSuggestions (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentSuggestion</returns>
        
        ApiResponse<KnowledgeDocumentSuggestion> PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null);

        /// <summary>
        /// Bulk add document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        BulkResponse PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body);

        /// <summary>
        /// Bulk add document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        ApiResponse<BulkResponse> PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body);

        /// <summary>
        /// Create export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExportJobResponse</returns>
        
        KnowledgeExportJobResponse PostKnowledgeKnowledgebaseExportJobs (string knowledgeBaseId, KnowledgeExportJobRequest body);

        /// <summary>
        /// Create export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExportJobResponse</returns>
        
        ApiResponse<KnowledgeExportJobResponse> PostKnowledgeKnowledgebaseExportJobsWithHttpInfo (string knowledgeBaseId, KnowledgeExportJobRequest body);

        /// <summary>
        /// Create import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        KnowledgeImportJobResponse PostKnowledgeKnowledgebaseImportJobs (string knowledgeBaseId, KnowledgeImportJobRequest body);

        /// <summary>
        /// Create import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        ApiResponse<KnowledgeImportJobResponse> PostKnowledgeKnowledgebaseImportJobsWithHttpInfo (string knowledgeBaseId, KnowledgeImportJobRequest body);

        /// <summary>
        /// Create new label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>LabelResponse</returns>
        
        LabelResponse PostKnowledgeKnowledgebaseLabels (string knowledgeBaseId, LabelCreateRequest body);

        /// <summary>
        /// Create new label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        ApiResponse<LabelResponse> PostKnowledgeKnowledgebaseLabelsWithHttpInfo (string knowledgeBaseId, LabelCreateRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        KnowledgeExtendedCategory PostKnowledgeKnowledgebaseLanguageCategories (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        ApiResponse<KnowledgeExtendedCategory> PostKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Upload Article Content
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        KnowledgeDocumentContentUpload PostKnowledgeKnowledgebaseLanguageDocumentUploads (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body);

        /// <summary>
        /// Upload Article Content
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocumentContentUpload> PostKnowledgeKnowledgebaseLanguageDocumentUploadsWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body);

        /// <summary>
        /// Create document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        KnowledgeDocument PostKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Create document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        ApiResponse<KnowledgeDocument> PostKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Create import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        KnowledgeImport PostKnowledgeKnowledgebaseLanguageDocumentsImports (string knowledgeBaseId, string languageCode, KnowledgeImport body);

        /// <summary>
        /// Create import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        ApiResponse<KnowledgeImport> PostKnowledgeKnowledgebaseLanguageDocumentsImportsWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeImport body);

        /// <summary>
        /// Promote trained documents from draft state to active.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        KnowledgeTraining PostKnowledgeKnowledgebaseLanguageTrainingPromote (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Promote trained documents from draft state to active.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        ApiResponse<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingPromoteWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Trigger training
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        KnowledgeTraining PostKnowledgeKnowledgebaseLanguageTrainings (string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Trigger training
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        ApiResponse<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo (string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Import the parsed articles
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        void PostKnowledgeKnowledgebaseParseJobImport (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body);

        /// <summary>
        /// Import the parsed articles
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        ApiResponse<Object> PostKnowledgeKnowledgebaseParseJobImportWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body);

        /// <summary>
        /// Create parse job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeParseJobResponse</returns>
        
        KnowledgeParseJobResponse PostKnowledgeKnowledgebaseParseJobs (string knowledgeBaseId, KnowledgeParseJobRequest body);

        /// <summary>
        /// Create parse job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeParseJobResponse</returns>
        
        ApiResponse<KnowledgeParseJobResponse> PostKnowledgeKnowledgebaseParseJobsWithHttpInfo (string knowledgeBaseId, KnowledgeParseJobRequest body);

        /// <summary>
        /// Search Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeSearchResponse</returns>
        [Obsolete]
        KnowledgeSearchResponse PostKnowledgeKnowledgebaseSearch (string knowledgeBaseId, KnowledgeSearchRequest body = null);

        /// <summary>
        /// Search Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeSearchResponse</returns>
        [Obsolete]
        ApiResponse<KnowledgeSearchResponse> PostKnowledgeKnowledgebaseSearchWithHttpInfo (string knowledgeBaseId, KnowledgeSearchRequest body = null);

        /// <summary>
        /// Create content upload from URL job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>CreateUploadSourceUrlJobResponse</returns>
        
        CreateUploadSourceUrlJobResponse PostKnowledgeKnowledgebaseUploadsUrlsJobs (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body);

        /// <summary>
        /// Create content upload from URL job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>ApiResponse of CreateUploadSourceUrlJobResponse</returns>
        
        ApiResponse<CreateUploadSourceUrlJobResponse> PostKnowledgeKnowledgebaseUploadsUrlsJobsWithHttpInfo (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body);

        /// <summary>
        /// Create new knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>KnowledgeBase</returns>
        
        KnowledgeBase PostKnowledgeKnowledgebases (KnowledgeBaseCreateRequest body);

        /// <summary>
        /// Create new knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        ApiResponse<KnowledgeBase> PostKnowledgeKnowledgebasesWithHttpInfo (KnowledgeBaseCreateRequest body);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Delete knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of KnowledgeBase</returns>
        
        System.Threading.Tasks.Task<KnowledgeBase> DeleteKnowledgeKnowledgebaseAsync (string knowledgeBaseId);

        /// <summary>
        /// Delete knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> DeleteKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of CategoryResponse</returns>
        
        System.Threading.Tasks.Task<CategoryResponse> DeleteKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> DeleteKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Delete document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId);

        /// <summary>
        /// Delete document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId);

        /// <summary>
        /// Delete a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId);

        /// <summary>
        /// Delete a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId);

        /// <summary>
        /// Delete export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseExportJobAsync (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Delete export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Delete import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId);

        /// <summary>
        /// Delete import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId);

        /// <summary>
        /// Delete label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of LabelResponse</returns>
        
        System.Threading.Tasks.Task<LabelResponse> DeleteKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Delete label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> DeleteKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeCategory</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeCategory> DeleteKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeCategory)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeCategory>> DeleteKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocument> DeleteKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> DeleteKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Delete import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Delete import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of GuestCategoryResponseListing</returns>
        
        System.Threading.Tasks.Task<GuestCategoryResponseListing> GetKnowledgeGuestSessionCategoriesAsync (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of ApiResponse (GuestCategoryResponseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<GuestCategoryResponseListing>> GetKnowledgeGuestSessionCategoriesAsyncWithHttpInfo (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get a knowledge document by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>Task of KnowledgeGuestDocumentResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeGuestDocumentResponse> GetKnowledgeGuestSessionDocumentAsync (string sessionId, string documentId);

        /// <summary>
        /// Get a knowledge document by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentResponse>> GetKnowledgeGuestSessionDocumentAsyncWithHttpInfo (string sessionId, string documentId);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentResponseListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeGuestDocumentResponseListing> GetKnowledgeGuestSessionDocumentsAsync (string sessionId, List<string> categoryId = null, int? pageSize = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentResponseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentResponseListing>> GetKnowledgeGuestSessionDocumentsAsyncWithHttpInfo (string sessionId, List<string> categoryId = null, int? pageSize = null);

        /// <summary>
        /// Get knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of KnowledgeBase</returns>
        
        System.Threading.Tasks.Task<KnowledgeBase> GetKnowledgeKnowledgebaseAsync (string knowledgeBaseId);

        /// <summary>
        /// Get knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> GetKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of CategoryResponseListing</returns>
        
        System.Threading.Tasks.Task<CategoryResponseListing> GetKnowledgeKnowledgebaseCategoriesAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CategoryResponseListing>> GetKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of CategoryResponse</returns>
        
        System.Threading.Tasks.Task<CategoryResponse> GetKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId);

        /// <summary>
        /// Get document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentResponse> GetKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null);

        /// <summary>
        /// Get document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> GetKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null);

        /// <summary>
        /// Get a list of feedback records given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponseListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponseListing> GetKnowledgeKnowledgebaseDocumentFeedbackAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null);

        /// <summary>
        /// Get a list of feedback records given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponseListing>> GetKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null);

        /// <summary>
        /// Get a single feedback record given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponse> GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdAsync (string knowledgeBaseId, string documentId, string feedbackId);

        /// <summary>
        /// Get a single feedback record given on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponse>> GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string feedbackId);

        /// <summary>
        /// Get a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of DocumentVariation</returns>
        
        System.Threading.Tasks.Task<DocumentVariation> GetKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null);

        /// <summary>
        /// Get a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> GetKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null);

        /// <summary>
        /// Get variations for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of DocumentVariationListing</returns>
        
        System.Threading.Tasks.Task<DocumentVariationListing> GetKnowledgeKnowledgebaseDocumentVariationsAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null);

        /// <summary>
        /// Get variations for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentVariationListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<DocumentVariationListing>> GetKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null);

        /// <summary>
        /// Get document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersion</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentVersion> GetKnowledgeKnowledgebaseDocumentVersionAsync (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null);

        /// <summary>
        /// Get document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersion)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersion>> GetKnowledgeKnowledgebaseDocumentVersionAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null);

        /// <summary>
        /// Get variation for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>Task of KnowledgeDocumentVersionVariation</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentVersionVariation> GetKnowledgeKnowledgebaseDocumentVersionVariationAsync (string knowledgeBaseId, string documentId, string versionId, string variationId);

        /// <summary>
        /// Get variation for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionVariation)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionVariation>> GetKnowledgeKnowledgebaseDocumentVersionVariationAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string variationId);

        /// <summary>
        /// Get variations for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersionVariationListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentVersionVariationListing> GetKnowledgeKnowledgebaseDocumentVersionVariationsAsync (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null);

        /// <summary>
        /// Get variations for the given document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionVariationListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionVariationListing>> GetKnowledgeKnowledgebaseDocumentVersionVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null);

        /// <summary>
        /// Get document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersionListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentVersionListing> GetKnowledgeKnowledgebaseDocumentVersionsAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null);

        /// <summary>
        /// Get document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionListing>> GetKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentResponseListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentResponseListing> GetKnowledgeKnowledgebaseDocumentsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null);

        /// <summary>
        /// Get documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponseListing>> GetKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null);

        /// <summary>
        /// Get export job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of KnowledgeExportJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeExportJobResponse> GetKnowledgeKnowledgebaseExportJobAsync (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Get export job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of ApiResponse (KnowledgeExportJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeExportJobResponse>> GetKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo (string knowledgeBaseId, string exportJobId);

        /// <summary>
        /// Get import job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeImportJobResponse> GetKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId, List<string> expand = null);

        /// <summary>
        /// Get import job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> GetKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId, List<string> expand = null);

        /// <summary>
        /// Get label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of LabelResponse</returns>
        
        System.Threading.Tasks.Task<LabelResponse> GetKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Get label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> GetKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId);

        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>Task of LabelListing</returns>
        
        System.Threading.Tasks.Task<LabelListing> GetKnowledgeKnowledgebaseLabelsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>Task of ApiResponse (LabelListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<LabelListing>> GetKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>Task of CategoryListing</returns>
        [Obsolete]
        System.Threading.Tasks.Task<CategoryListing> GetKnowledgeKnowledgebaseLanguageCategoriesAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null);

        /// <summary>
        /// Get categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>Task of ApiResponse (CategoryListing)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<CategoryListing>> GetKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeExtendedCategory> GetKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> GetKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocument> GetKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> GetKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Get document content upload status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>Task of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocumentContentUpload> GetKnowledgeKnowledgebaseLanguageDocumentUploadAsync (string documentId, string knowledgeBaseId, string languageCode, string uploadId);

        /// <summary>
        /// Get document content upload status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentContentUpload)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentContentUpload>> GetKnowledgeKnowledgebaseLanguageDocumentUploadAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, string uploadId);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>Task of DocumentListing</returns>
        [Obsolete]
        System.Threading.Tasks.Task<DocumentListing> GetKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentListing)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<DocumentListing>> GetKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null);

        /// <summary>
        /// Get import operation report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeImport> GetKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get import operation report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> GetKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId);

        /// <summary>
        /// Get training detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeTraining> GetKnowledgeKnowledgebaseLanguageTrainingAsync (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Get training detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> GetKnowledgeKnowledgebaseLanguageTrainingAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Get all trainings information for a knowledgebase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>Task of TrainingListing</returns>
        [Obsolete]
        System.Threading.Tasks.Task<TrainingListing> GetKnowledgeKnowledgebaseLanguageTrainingsAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null);

        /// <summary>
        /// Get all trainings information for a knowledgebase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>Task of ApiResponse (TrainingListing)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<TrainingListing>> GetKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null);

        /// <summary>
        /// Get operations
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>Task of OperationListing</returns>
        
        System.Threading.Tasks.Task<OperationListing> GetKnowledgeKnowledgebaseOperationsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null);

        /// <summary>
        /// Get operations
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (OperationListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<OperationListing>> GetKnowledgeKnowledgebaseOperationsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null);

        /// <summary>
        /// Get ids of operation creator users and oauth clients
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of OperationCreatorUserResponse</returns>
        
        System.Threading.Tasks.Task<OperationCreatorUserResponse> GetKnowledgeKnowledgebaseOperationsUsersQueryAsync (string knowledgeBaseId);

        /// <summary>
        /// Get ids of operation creator users and oauth clients
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (OperationCreatorUserResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<OperationCreatorUserResponse>> GetKnowledgeKnowledgebaseOperationsUsersQueryAsyncWithHttpInfo (string knowledgeBaseId);

        /// <summary>
        /// Get parse job report
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of KnowledgeParseJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeParseJobResponse> GetKnowledgeKnowledgebaseParseJobAsync (string knowledgeBaseId, string parseJobId, List<string> expand = null);

        /// <summary>
        /// Get parse job report
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeParseJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeParseJobResponse>> GetKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, List<string> expand = null);

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredGroup</returns>
        
        System.Threading.Tasks.Task<UnansweredGroup> GetKnowledgeKnowledgebaseUnansweredGroupAsync (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredGroup)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<UnansweredGroup>> GetKnowledgeKnowledgebaseUnansweredGroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredPhraseGroup</returns>
        
        System.Threading.Tasks.Task<UnansweredPhraseGroup> GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsync (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredPhraseGroup)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<UnansweredPhraseGroup>> GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredGroups</returns>
        
        System.Threading.Tasks.Task<UnansweredGroups> GetKnowledgeKnowledgebaseUnansweredGroupsAsync (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get knowledge base unanswered groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredGroups)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<UnansweredGroups>> GetKnowledgeKnowledgebaseUnansweredGroupsAsyncWithHttpInfo (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null);

        /// <summary>
        /// Get content upload from URL job status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>Task of GetUploadSourceUrlJobStatusResponse</returns>
        
        System.Threading.Tasks.Task<GetUploadSourceUrlJobStatusResponse> GetKnowledgeKnowledgebaseUploadsUrlsJobAsync (string knowledgeBaseId, string jobId);

        /// <summary>
        /// Get content upload from URL job status
        /// </summary>
        /// <remarks>
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>Task of ApiResponse (GetUploadSourceUrlJobStatusResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<GetUploadSourceUrlJobStatusResponse>> GetKnowledgeKnowledgebaseUploadsUrlsJobAsyncWithHttpInfo (string knowledgeBaseId, string jobId);

        /// <summary>
        /// Get knowledge bases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>Task of KnowledgeBaseListing</returns>
        
        System.Threading.Tasks.Task<KnowledgeBaseListing> GetKnowledgeKnowledgebasesAsync (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Get knowledge bases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeBaseListing)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeBaseListing>> GetKnowledgeKnowledgebasesAsyncWithHttpInfo (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PatchKnowledgeGuestSessionDocumentsSearchSearchIdAsync (string sessionId, string searchId, SearchUpdateRequest body);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeGuestSessionDocumentsSearchSearchIdAsyncWithHttpInfo (string sessionId, string searchId, SearchUpdateRequest body);

        /// <summary>
        /// Update knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeBase</returns>
        
        System.Threading.Tasks.Task<KnowledgeBase> PatchKnowledgeKnowledgebaseAsync (string knowledgeBaseId, KnowledgeBaseUpdateRequest body);

        /// <summary>
        /// Update knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> PatchKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeBaseUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>Task of CategoryResponse</returns>
        
        System.Threading.Tasks.Task<CategoryResponse> PatchKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> PatchKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body);

        /// <summary>
        /// Update document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentResponse> PatchKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body);

        /// <summary>
        /// Update document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> PatchKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body);

        /// <summary>
        /// Update a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentVariation</returns>
        
        System.Threading.Tasks.Task<DocumentVariation> PatchKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body);

        /// <summary>
        /// Update a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> PatchKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdAsync (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null);

        /// <summary>
        /// Update search result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdAsyncWithHttpInfo (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null);

        /// <summary>
        /// Start import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeImportJobResponse> PatchKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId, ImportStatusRequest body);

        /// <summary>
        /// Start import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> PatchKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId, ImportStatusRequest body);

        /// <summary>
        /// Update label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>Task of LabelResponse</returns>
        
        System.Threading.Tasks.Task<LabelResponse> PatchKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId, LabelUpdateRequest body);

        /// <summary>
        /// Update label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PatchKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId, LabelUpdateRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeExtendedCategory> PatchKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> PatchKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Update document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocument> PatchKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Update document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> PatchKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Update documents collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentListing</returns>
        [Obsolete]
        System.Threading.Tasks.Task<DocumentListing> PatchKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body);

        /// <summary>
        /// Update documents collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentListing)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<DocumentListing>> PatchKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body);

        /// <summary>
        /// Start import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeImport> PatchKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body);

        /// <summary>
        /// Start import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> PatchKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body);

        /// <summary>
        /// Send update to the parse operation
        /// </summary>
        /// <remarks>
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PatchKnowledgeKnowledgebaseParseJobAsync (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body);

        /// <summary>
        /// Send update to the parse operation
        /// </summary>
        /// <remarks>
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body);

        /// <summary>
        /// Update a Knowledge base unanswered phrase group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>Task of UnansweredPhraseGroupUpdateResponse</returns>
        
        System.Threading.Tasks.Task<UnansweredPhraseGroupUpdateResponse> PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsync (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body);

        /// <summary>
        /// Update a Knowledge base unanswered phrase group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>Task of ApiResponse (UnansweredPhraseGroupUpdateResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<UnansweredPhraseGroupUpdateResponse>> PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body);

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>Task of UploadUrlResponse</returns>
        
        System.Threading.Tasks.Task<UploadUrlResponse> PostKnowledgeDocumentuploadsAsync (UploadUrlRequest body);

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>Task of ApiResponse (UploadUrlResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<UploadUrlResponse>> PostKnowledgeDocumentuploadsAsyncWithHttpInfo (UploadUrlRequest body);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentCopiesAsync (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentCopiesAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentFeedback</returns>
        
        System.Threading.Tasks.Task<KnowledgeGuestDocumentFeedback> PostKnowledgeGuestSessionDocumentFeedbackAsync (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentFeedback)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentFeedback>> PostKnowledgeGuestSessionDocumentFeedbackAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null);

        /// <summary>
        /// Create view event for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentViewsAsync (string sessionId, string documentId, KnowledgeGuestDocumentView body = null);

        /// <summary>
        /// Create view event for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentViewsAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentView body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentsPresentationsAsync (string sessionId, KnowledgeGuestDocumentPresentation body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentsPresentationsAsyncWithHttpInfo (string sessionId, KnowledgeGuestDocumentPresentation body = null);

        /// <summary>
        /// Search the documents in a guest session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentGuestSearch</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentGuestSearch> PostKnowledgeGuestSessionDocumentsSearchAsync (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null);

        /// <summary>
        /// Search the documents in a guest session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentGuestSearch)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentGuestSearch>> PostKnowledgeGuestSessionDocumentsSearchAsyncWithHttpInfo (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentSuggestion</returns>
        
        System.Threading.Tasks.Task<KnowledgeGuestDocumentSuggestion> PostKnowledgeGuestSessionDocumentsSearchSuggestionsAsync (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentSuggestion)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentSuggestion>> PostKnowledgeGuestSessionDocumentsSearchSuggestionsAsyncWithHttpInfo (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null);

        /// <summary>
        /// Create guest session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeGuestSession</returns>
        
        System.Threading.Tasks.Task<KnowledgeGuestSession> PostKnowledgeGuestSessionsAsync (KnowledgeGuestSession body);

        /// <summary>
        /// Create guest session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeGuestSession)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestSession>> PostKnowledgeGuestSessionsAsyncWithHttpInfo (KnowledgeGuestSession body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of CategoryResponse</returns>
        
        System.Threading.Tasks.Task<CategoryResponse> PostKnowledgeKnowledgebaseCategoriesAsync (string knowledgeBaseId, CategoryCreateRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> PostKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo (string knowledgeBaseId, CategoryCreateRequest body);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentCopiesAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null);

        /// <summary>
        /// Indicate that the document was copied by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentCopiesAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponse> PostKnowledgeKnowledgebaseDocumentFeedbackAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null);

        /// <summary>
        /// Give feedback on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponse>> PostKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null);

        /// <summary>
        /// Create a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentVariation</returns>
        
        System.Threading.Tasks.Task<DocumentVariation> PostKnowledgeKnowledgebaseDocumentVariationsAsync (string knowledgeBaseId, string documentId, DocumentVariation body);

        /// <summary>
        /// Create a variation for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> PostKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, DocumentVariation body);

        /// <summary>
        /// Creates or restores a document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentVersion</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentVersion> PostKnowledgeKnowledgebaseDocumentVersionsAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body);

        /// <summary>
        /// Creates or restores a document version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersion)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersion>> PostKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body);

        /// <summary>
        /// Create view for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentViewsAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null);

        /// <summary>
        /// Create view for a document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentViewsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null);

        /// <summary>
        /// Create document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentResponse> PostKnowledgeKnowledgebaseDocumentsAsync (string knowledgeBaseId, KnowledgeDocumentReq body);

        /// <summary>
        /// Create document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> PostKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentReq body);

        /// <summary>
        /// Bulk remove documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkRemoveAsync (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body);

        /// <summary>
        /// Bulk remove documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsBulkRemoveAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body);

        /// <summary>
        /// Bulk update documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkUpdateAsync (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body);

        /// <summary>
        /// Bulk update documents.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsBulkUpdateAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentsPresentationsAsync (string knowledgeBaseId, KnowledgeDocumentPresentation body = null);

        /// <summary>
        /// Indicate that documents were presented to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentsPresentationsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentPresentation body = null);

        /// <summary>
        /// Search the documents in a knowledge base.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentSearch</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentSearch> PostKnowledgeKnowledgebaseDocumentsSearchAsync (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null);

        /// <summary>
        /// Search the documents in a knowledge base.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentSearch)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentSearch>> PostKnowledgeKnowledgebaseDocumentsSearchAsyncWithHttpInfo (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentSuggestion</returns>
        
        System.Threading.Tasks.Task<KnowledgeDocumentSuggestion> PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsAsync (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null);

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentSuggestion)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentSuggestion>> PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null);

        /// <summary>
        /// Bulk add document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddAsync (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body);

        /// <summary>
        /// Bulk add document versions.
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body);

        /// <summary>
        /// Create export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExportJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeExportJobResponse> PostKnowledgeKnowledgebaseExportJobsAsync (string knowledgeBaseId, KnowledgeExportJobRequest body);

        /// <summary>
        /// Create export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExportJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeExportJobResponse>> PostKnowledgeKnowledgebaseExportJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeExportJobRequest body);

        /// <summary>
        /// Create import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeImportJobResponse> PostKnowledgeKnowledgebaseImportJobsAsync (string knowledgeBaseId, KnowledgeImportJobRequest body);

        /// <summary>
        /// Create import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> PostKnowledgeKnowledgebaseImportJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeImportJobRequest body);

        /// <summary>
        /// Create new label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of LabelResponse</returns>
        
        System.Threading.Tasks.Task<LabelResponse> PostKnowledgeKnowledgebaseLabelsAsync (string knowledgeBaseId, LabelCreateRequest body);

        /// <summary>
        /// Create new label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PostKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo (string knowledgeBaseId, LabelCreateRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeExtendedCategory> PostKnowledgeKnowledgebaseLanguageCategoriesAsync (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Create new category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> PostKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body);

        /// <summary>
        /// Upload Article Content
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocumentContentUpload> PostKnowledgeKnowledgebaseLanguageDocumentUploadsAsync (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body);

        /// <summary>
        /// Upload Article Content
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentContentUpload)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentContentUpload>> PostKnowledgeKnowledgebaseLanguageDocumentUploadsAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body);

        /// <summary>
        /// Create document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeDocument> PostKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Create document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> PostKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body);

        /// <summary>
        /// Create import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeImport> PostKnowledgeKnowledgebaseLanguageDocumentsImportsAsync (string knowledgeBaseId, string languageCode, KnowledgeImport body);

        /// <summary>
        /// Create import operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> PostKnowledgeKnowledgebaseLanguageDocumentsImportsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeImport body);

        /// <summary>
        /// Promote trained documents from draft state to active.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingPromoteAsync (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Promote trained documents from draft state to active.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> PostKnowledgeKnowledgebaseLanguageTrainingPromoteAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId);

        /// <summary>
        /// Trigger training
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingsAsync (string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Trigger training
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> PostKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode);

        /// <summary>
        /// Import the parsed articles
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        System.Threading.Tasks.Task PostKnowledgeKnowledgebaseParseJobImportAsync (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body);

        /// <summary>
        /// Import the parsed articles
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseParseJobImportAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body);

        /// <summary>
        /// Create parse job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeParseJobResponse</returns>
        
        System.Threading.Tasks.Task<KnowledgeParseJobResponse> PostKnowledgeKnowledgebaseParseJobsAsync (string knowledgeBaseId, KnowledgeParseJobRequest body);

        /// <summary>
        /// Create parse job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeParseJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeParseJobResponse>> PostKnowledgeKnowledgebaseParseJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeParseJobRequest body);

        /// <summary>
        /// Search Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeSearchResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<KnowledgeSearchResponse> PostKnowledgeKnowledgebaseSearchAsync (string knowledgeBaseId, KnowledgeSearchRequest body = null);

        /// <summary>
        /// Search Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeSearchResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<KnowledgeSearchResponse>> PostKnowledgeKnowledgebaseSearchAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeSearchRequest body = null);

        /// <summary>
        /// Create content upload from URL job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>Task of CreateUploadSourceUrlJobResponse</returns>
        
        System.Threading.Tasks.Task<CreateUploadSourceUrlJobResponse> PostKnowledgeKnowledgebaseUploadsUrlsJobsAsync (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body);

        /// <summary>
        /// Create content upload from URL job
        /// </summary>
        /// <remarks>
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>Task of ApiResponse (CreateUploadSourceUrlJobResponse)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<CreateUploadSourceUrlJobResponse>> PostKnowledgeKnowledgebaseUploadsUrlsJobsAsyncWithHttpInfo (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body);

        /// <summary>
        /// Create new knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeBase</returns>
        
        System.Threading.Tasks.Task<KnowledgeBase> PostKnowledgeKnowledgebasesAsync (KnowledgeBaseCreateRequest body);

        /// <summary>
        /// Create new knowledge base
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> PostKnowledgeKnowledgebasesAsyncWithHttpInfo (KnowledgeBaseCreateRequest body);

        #endregion Asynchronous Operations

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KnowledgeApi : IKnowledgeApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KnowledgeApi(String basePath)
        {
            this.Configuration = new PureCloudPlatform.Client.V2.Client.Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (this.Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KnowledgeApi(PureCloudPlatform.Client.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PureCloudPlatform.Client.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (this.Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
             return this.Configuration.ApiClient.ClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'this.Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PureCloudPlatform.Client.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use this.Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use this.Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }


        /// <summary>
        /// Delete knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>KnowledgeBase</returns>
        
        public KnowledgeBase DeleteKnowledgeKnowledgebase (string knowledgeBaseId)
        {
             ApiResponse<KnowledgeBase> localVarResponse = DeleteKnowledgeKnowledgebaseWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        public ApiResponse< KnowledgeBase > DeleteKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebase");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of KnowledgeBase</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeBase> DeleteKnowledgeKnowledgebaseAsync (string knowledgeBaseId)
        {
             ApiResponse<KnowledgeBase> localVarResponse = await DeleteKnowledgeKnowledgebaseAsyncWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> DeleteKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebase");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>CategoryResponse</returns>
        
        public CategoryResponse DeleteKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = DeleteKnowledgeKnowledgebaseCategoryWithHttpInfo(knowledgeBaseId, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        public ApiResponse< CategoryResponse > DeleteKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of CategoryResponse</returns>
        
        public async System.Threading.Tasks.Task<CategoryResponse> DeleteKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = await DeleteKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo(knowledgeBaseId, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> DeleteKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseCategory");
            
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns></returns>
        
        public void DeleteKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId)
        {
             DeleteKnowledgeKnowledgebaseDocumentWithHttpInfo(knowledgeBaseId, documentId);
        }

        /// <summary>
        /// Delete document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> DeleteKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId)
        {
             await DeleteKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo(knowledgeBaseId, documentId);

        }

        /// <summary>
        /// Delete document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocument");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns></returns>
        
        public void DeleteKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId)
        {
             DeleteKnowledgeKnowledgebaseDocumentVariationWithHttpInfo(documentVariationId, documentId, knowledgeBaseId);
        }

        /// <summary>
        /// Delete a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> DeleteKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId)
        {
             await DeleteKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo(documentVariationId, documentId, knowledgeBaseId);

        }

        /// <summary>
        /// Delete a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseDocumentVariation");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns></returns>
        
        public void DeleteKnowledgeKnowledgebaseExportJob (string knowledgeBaseId, string exportJobId)
        {
             DeleteKnowledgeKnowledgebaseExportJobWithHttpInfo(knowledgeBaseId, exportJobId);
        }

        /// <summary>
        /// Delete export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> DeleteKnowledgeKnowledgebaseExportJobWithHttpInfo (string knowledgeBaseId, string exportJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseExportJob");
            // verify the required parameter 'exportJobId' is set
            if (exportJobId == null)
                throw new ApiException(400, "Missing required parameter 'exportJobId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseExportJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (exportJobId != null) localVarPathParams.Add("exportJobId", this.Configuration.ApiClient.ParameterToString(exportJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseExportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseExportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseExportJobAsync (string knowledgeBaseId, string exportJobId)
        {
             await DeleteKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo(knowledgeBaseId, exportJobId);

        }

        /// <summary>
        /// Delete export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo (string knowledgeBaseId, string exportJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseExportJob");
            
            // verify the required parameter 'exportJobId' is set
            if (exportJobId == null)
                throw new ApiException(400, "Missing required parameter 'exportJobId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseExportJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (exportJobId != null) localVarPathParams.Add("exportJobId", this.Configuration.ApiClient.ParameterToString(exportJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseExportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseExportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns></returns>
        
        public void DeleteKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId)
        {
             DeleteKnowledgeKnowledgebaseImportJobWithHttpInfo(knowledgeBaseId, importJobId);
        }

        /// <summary>
        /// Delete import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> DeleteKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseImportJob");
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseImportJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId)
        {
             await DeleteKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo(knowledgeBaseId, importJobId);

        }

        /// <summary>
        /// Delete import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseImportJob");
            
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseImportJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>LabelResponse</returns>
        
        public LabelResponse DeleteKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId)
        {
             ApiResponse<LabelResponse> localVarResponse = DeleteKnowledgeKnowledgebaseLabelWithHttpInfo(knowledgeBaseId, labelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        public ApiResponse< LabelResponse > DeleteKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLabel");
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLabel");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of LabelResponse</returns>
        
        public async System.Threading.Tasks.Task<LabelResponse> DeleteKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId)
        {
             ApiResponse<LabelResponse> localVarResponse = await DeleteKnowledgeKnowledgebaseLabelAsyncWithHttpInfo(knowledgeBaseId, labelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> DeleteKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLabel");
            
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLabel");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeCategory</returns>
        [Obsolete]
        public KnowledgeCategory DeleteKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeCategory> localVarResponse = DeleteKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo(categoryId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeCategory</returns>
        [Obsolete]
        public ApiResponse< KnowledgeCategory > DeleteKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeCategory</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeCategory> DeleteKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeCategory> localVarResponse = await DeleteKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo(categoryId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeCategory)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeCategory>> DeleteKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        public KnowledgeDocument DeleteKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = DeleteKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo(documentId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocument > DeleteKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocument> DeleteKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = await DeleteKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo(documentId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> DeleteKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Delete import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId)
        {
             DeleteKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo(knowledgeBaseId, languageCode, importId);
        }

        /// <summary>
        /// Delete import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public ApiResponse<Object> DeleteKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Delete import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId)
        {
             await DeleteKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo(knowledgeBaseId, languageCode, importId);

        }

        /// <summary>
        /// Delete import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->DeleteKnowledgeKnowledgebaseLanguageDocumentsImport");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling DeleteKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>GuestCategoryResponseListing</returns>
        
        public GuestCategoryResponseListing GetKnowledgeGuestSessionCategories (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        {
             ApiResponse<GuestCategoryResponseListing> localVarResponse = GetKnowledgeGuestSessionCategoriesWithHttpInfo(sessionId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>ApiResponse of GuestCategoryResponseListing</returns>
        
        public ApiResponse< GuestCategoryResponseListing > GetKnowledgeGuestSessionCategoriesWithHttpInfo (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionCategories");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (parentId != null) localVarQueryParams.Add(new Tuple<string, string>("parentId", this.Configuration.ApiClient.ParameterToString(parentId)));
            if (isRoot != null) localVarQueryParams.Add(new Tuple<string, string>("isRoot", this.Configuration.ApiClient.ParameterToString(isRoot)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (expand != null) localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(expand)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<GuestCategoryResponseListing>(localVarStatusCode,
                localVarHeaders,
                (GuestCategoryResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuestCategoryResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of GuestCategoryResponseListing</returns>
        
        public async System.Threading.Tasks.Task<GuestCategoryResponseListing> GetKnowledgeGuestSessionCategoriesAsync (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        {
             ApiResponse<GuestCategoryResponseListing> localVarResponse = await GetKnowledgeGuestSessionCategoriesAsyncWithHttpInfo(sessionId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of ApiResponse (GuestCategoryResponseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<GuestCategoryResponseListing>> GetKnowledgeGuestSessionCategoriesAsyncWithHttpInfo (string sessionId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionCategories");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (parentId != null) localVarQueryParams.Add(new Tuple<string, string>("parentId", this.Configuration.ApiClient.ParameterToString(parentId)));
            if (isRoot != null) localVarQueryParams.Add(new Tuple<string, string>("isRoot", this.Configuration.ApiClient.ParameterToString(isRoot)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (expand != null) localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(expand)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<GuestCategoryResponseListing>(localVarStatusCode,
                localVarHeaders,
                (GuestCategoryResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuestCategoryResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get a knowledge document by ID. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>KnowledgeGuestDocumentResponse</returns>
        
        public KnowledgeGuestDocumentResponse GetKnowledgeGuestSessionDocument (string sessionId, string documentId)
        {
             ApiResponse<KnowledgeGuestDocumentResponse> localVarResponse = GetKnowledgeGuestSessionDocumentWithHttpInfo(sessionId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a knowledge document by ID. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentResponse</returns>
        
        public ApiResponse< KnowledgeGuestDocumentResponse > GetKnowledgeGuestSessionDocumentWithHttpInfo (string sessionId, string documentId)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocument");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get a knowledge document by ID. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>Task of KnowledgeGuestDocumentResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeGuestDocumentResponse> GetKnowledgeGuestSessionDocumentAsync (string sessionId, string documentId)
        {
             ApiResponse<KnowledgeGuestDocumentResponse> localVarResponse = await GetKnowledgeGuestSessionDocumentAsyncWithHttpInfo(sessionId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a knowledge document by ID. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentResponse>> GetKnowledgeGuestSessionDocumentAsyncWithHttpInfo (string sessionId, string documentId)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocument");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocument");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>KnowledgeGuestDocumentResponseListing</returns>
        
        public KnowledgeGuestDocumentResponseListing GetKnowledgeGuestSessionDocuments (string sessionId, List<string> categoryId = null, int? pageSize = null)
        {
             ApiResponse<KnowledgeGuestDocumentResponseListing> localVarResponse = GetKnowledgeGuestSessionDocumentsWithHttpInfo(sessionId, categoryId, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentResponseListing</returns>
        
        public ApiResponse< KnowledgeGuestDocumentResponseListing > GetKnowledgeGuestSessionDocumentsWithHttpInfo (string sessionId, List<string> categoryId = null, int? pageSize = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocuments");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (categoryId != null) categoryId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("categoryId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentResponseListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeGuestDocumentResponseListing> GetKnowledgeGuestSessionDocumentsAsync (string sessionId, List<string> categoryId = null, int? pageSize = null)
        {
             ApiResponse<KnowledgeGuestDocumentResponseListing> localVarResponse = await GetKnowledgeGuestSessionDocumentsAsyncWithHttpInfo(sessionId, categoryId, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentResponseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentResponseListing>> GetKnowledgeGuestSessionDocumentsAsyncWithHttpInfo (string sessionId, List<string> categoryId = null, int? pageSize = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->GetKnowledgeGuestSessionDocuments");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (categoryId != null) categoryId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("categoryId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));

            // Header params

            // Form params
            
            // Body param


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeGuestSessionDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>KnowledgeBase</returns>
        
        public KnowledgeBase GetKnowledgeKnowledgebase (string knowledgeBaseId)
        {
             ApiResponse<KnowledgeBase> localVarResponse = GetKnowledgeKnowledgebaseWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        public ApiResponse< KnowledgeBase > GetKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebase");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of KnowledgeBase</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeBase> GetKnowledgeKnowledgebaseAsync (string knowledgeBaseId)
        {
             ApiResponse<KnowledgeBase> localVarResponse = await GetKnowledgeKnowledgebaseAsyncWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> GetKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebase");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>CategoryResponseListing</returns>
        
        public CategoryResponseListing GetKnowledgeKnowledgebaseCategories (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        {
             ApiResponse<CategoryResponseListing> localVarResponse = GetKnowledgeKnowledgebaseCategoriesWithHttpInfo(knowledgeBaseId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>ApiResponse of CategoryResponseListing</returns>
        
        public ApiResponse< CategoryResponseListing > GetKnowledgeKnowledgebaseCategoriesWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategories");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (parentId != null) localVarQueryParams.Add(new Tuple<string, string>("parentId", this.Configuration.ApiClient.ParameterToString(parentId)));
            if (isRoot != null) localVarQueryParams.Add(new Tuple<string, string>("isRoot", this.Configuration.ApiClient.ParameterToString(isRoot)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (expand != null) localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(expand)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponseListing>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of CategoryResponseListing</returns>
        
        public async System.Threading.Tasks.Task<CategoryResponseListing> GetKnowledgeKnowledgebaseCategoriesAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        {
             ApiResponse<CategoryResponseListing> localVarResponse = await GetKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo(knowledgeBaseId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="parentId">If specified, retrieves the children categories by parent category ID. (optional)</param>
        /// <param name="isRoot">If specified, retrieves only the root categories. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <param name="sortBy">Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically (optional, default to Name)</param>
        /// <param name="expand">The specified entity attribute will be filled. Supported value:\&quot;Ancestors\&quot;: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to category. (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponseListing>> GetKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string parentId = null, bool? isRoot = null, string name = null, string sortBy = null, string expand = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategories");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (parentId != null) localVarQueryParams.Add(new Tuple<string, string>("parentId", this.Configuration.ApiClient.ParameterToString(parentId)));
            if (isRoot != null) localVarQueryParams.Add(new Tuple<string, string>("isRoot", this.Configuration.ApiClient.ParameterToString(isRoot)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (expand != null) localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(expand)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponseListing>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>CategoryResponse</returns>
        
        public CategoryResponse GetKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = GetKnowledgeKnowledgebaseCategoryWithHttpInfo(knowledgeBaseId, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        public ApiResponse< CategoryResponse > GetKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of CategoryResponse</returns>
        
        public async System.Threading.Tasks.Task<CategoryResponse> GetKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = await GetKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo(knowledgeBaseId, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategory");
            
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        public KnowledgeDocumentResponse GetKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = GetKnowledgeKnowledgebaseDocumentWithHttpInfo(knowledgeBaseId, documentId, expand, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        public ApiResponse< KnowledgeDocumentResponse > GetKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (state != null) localVarQueryParams.Add(new Tuple<string, string>("state", this.Configuration.ApiClient.ParameterToString(state)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentResponse> GetKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = await GetKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo(knowledgeBaseId, documentId, expand, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20. (optional)</param>
        /// <param name="state">\&quot;when state is \&quot;Draft\&quot;, draft version of the document is returned,otherwise by default published version is returned in the response. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> GetKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId, List<string> expand = null, string state = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocument");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (state != null) localVarQueryParams.Add(new Tuple<string, string>("state", this.Configuration.ApiClient.ParameterToString(state)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get a list of feedback records given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>KnowledgeDocumentFeedbackResponseListing</returns>
        
        public KnowledgeDocumentFeedbackResponseListing GetKnowledgeKnowledgebaseDocumentFeedback (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponseListing> localVarResponse = GetKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, onlyCommented, documentVersionId, documentVariationId, appType, queryType, userId, queueId, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of feedback records given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponseListing</returns>
        
        public ApiResponse< KnowledgeDocumentFeedbackResponseListing > GetKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedback");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedback");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (onlyCommented != null) localVarQueryParams.Add(new Tuple<string, string>("onlyCommented", this.Configuration.ApiClient.ParameterToString(onlyCommented)));
            if (documentVersionId != null) localVarQueryParams.Add(new Tuple<string, string>("documentVersionId", this.Configuration.ApiClient.ParameterToString(documentVersionId)));
            if (documentVariationId != null) localVarQueryParams.Add(new Tuple<string, string>("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId)));
            if (appType != null) localVarQueryParams.Add(new Tuple<string, string>("appType", this.Configuration.ApiClient.ParameterToString(appType)));
            if (queryType != null) localVarQueryParams.Add(new Tuple<string, string>("queryType", this.Configuration.ApiClient.ParameterToString(queryType)));
            if (userId != null) localVarQueryParams.Add(new Tuple<string, string>("userId", this.Configuration.ApiClient.ParameterToString(userId)));
            if (queueId != null) localVarQueryParams.Add(new Tuple<string, string>("queueId", this.Configuration.ApiClient.ParameterToString(queueId)));
            if (state != null) localVarQueryParams.Add(new Tuple<string, string>("state", this.Configuration.ApiClient.ParameterToString(state)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get a list of feedback records given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponseListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponseListing> GetKnowledgeKnowledgebaseDocumentFeedbackAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponseListing> localVarResponse = await GetKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, onlyCommented, documentVersionId, documentVariationId, appType, queryType, userId, queueId, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of feedback records given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="onlyCommented">If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false. (optional)</param>
        /// <param name="documentVersionId">Document version ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="documentVariationId">Document variation ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="appType">Application type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queryType">Query type to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="userId">The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="queueId">Queue ID to filter by. Supported only if onlyCommented&#x3D;true is set. (optional)</param>
        /// <param name="state">State to filter by. Supported only if onlyCommented&#x3D;true is set. Default: Final (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponseListing>> GetKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, bool? onlyCommented = null, string documentVersionId = null, string documentVariationId = null, string appType = null, string queryType = null, string userId = null, string queueId = null, string state = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedback");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedback");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (onlyCommented != null) localVarQueryParams.Add(new Tuple<string, string>("onlyCommented", this.Configuration.ApiClient.ParameterToString(onlyCommented)));
            if (documentVersionId != null) localVarQueryParams.Add(new Tuple<string, string>("documentVersionId", this.Configuration.ApiClient.ParameterToString(documentVersionId)));
            if (documentVariationId != null) localVarQueryParams.Add(new Tuple<string, string>("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId)));
            if (appType != null) localVarQueryParams.Add(new Tuple<string, string>("appType", this.Configuration.ApiClient.ParameterToString(appType)));
            if (queryType != null) localVarQueryParams.Add(new Tuple<string, string>("queryType", this.Configuration.ApiClient.ParameterToString(queryType)));
            if (userId != null) localVarQueryParams.Add(new Tuple<string, string>("userId", this.Configuration.ApiClient.ParameterToString(userId)));
            if (queueId != null) localVarQueryParams.Add(new Tuple<string, string>("queueId", this.Configuration.ApiClient.ParameterToString(queueId)));
            if (state != null) localVarQueryParams.Add(new Tuple<string, string>("state", this.Configuration.ApiClient.ParameterToString(state)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get a single feedback record given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>KnowledgeDocumentFeedbackResponse</returns>
        
        public KnowledgeDocumentFeedbackResponse GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId (string knowledgeBaseId, string documentId, string feedbackId)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponse> localVarResponse = GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdWithHttpInfo(knowledgeBaseId, documentId, feedbackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single feedback record given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponse</returns>
        
        public ApiResponse< KnowledgeDocumentFeedbackResponse > GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdWithHttpInfo (string knowledgeBaseId, string documentId, string feedbackId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
                throw new ApiException(400, "Missing required parameter 'feedbackId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (feedbackId != null) localVarPathParams.Add("feedbackId", this.Configuration.ApiClient.ParameterToString(feedbackId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get a single feedback record given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponse> GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdAsync (string knowledgeBaseId, string documentId, string feedbackId)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponse> localVarResponse = await GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdAsyncWithHttpInfo(knowledgeBaseId, documentId, feedbackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single feedback record given on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="feedbackId">Feedback ID.</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponse>> GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackIdAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string feedbackId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");
            
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
                throw new ApiException(400, "Missing required parameter 'feedbackId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (feedbackId != null) localVarPathParams.Add("feedbackId", this.Configuration.ApiClient.ParameterToString(feedbackId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentFeedbackFeedbackId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>DocumentVariation</returns>
        
        public DocumentVariation GetKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null)
        {
             ApiResponse<DocumentVariation> localVarResponse = GetKnowledgeKnowledgebaseDocumentVariationWithHttpInfo(documentVariationId, documentId, knowledgeBaseId, documentState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        public ApiResponse< DocumentVariation > GetKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (documentState != null) localVarQueryParams.Add(new Tuple<string, string>("documentState", this.Configuration.ApiClient.ParameterToString(documentState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of DocumentVariation</returns>
        
        public async System.Threading.Tasks.Task<DocumentVariation> GetKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null)
        {
             ApiResponse<DocumentVariation> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo(documentVariationId, documentId, knowledgeBaseId, documentState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> GetKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, string documentState = null)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariation");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (documentState != null) localVarQueryParams.Add(new Tuple<string, string>("documentState", this.Configuration.ApiClient.ParameterToString(documentState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get variations for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>DocumentVariationListing</returns>
        
        public DocumentVariationListing GetKnowledgeKnowledgebaseDocumentVariations (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null)
        {
             ApiResponse<DocumentVariationListing> localVarResponse = GetKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, documentState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get variations for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>ApiResponse of DocumentVariationListing</returns>
        
        public ApiResponse< DocumentVariationListing > GetKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariations");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariations");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (documentState != null) localVarQueryParams.Add(new Tuple<string, string>("documentState", this.Configuration.ApiClient.ParameterToString(documentState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariationListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get variations for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of DocumentVariationListing</returns>
        
        public async System.Threading.Tasks.Task<DocumentVariationListing> GetKnowledgeKnowledgebaseDocumentVariationsAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null)
        {
             ApiResponse<DocumentVariationListing> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, documentState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get variations for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="documentState">The state of the document. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentVariationListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<DocumentVariationListing>> GetKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, string documentState = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariations");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVariations");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (documentState != null) localVarQueryParams.Add(new Tuple<string, string>("documentState", this.Configuration.ApiClient.ParameterToString(documentState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariationListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentVersion</returns>
        
        public KnowledgeDocumentVersion GetKnowledgeKnowledgebaseDocumentVersion (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null)
        {
             ApiResponse<KnowledgeDocumentVersion> localVarResponse = GetKnowledgeKnowledgebaseDocumentVersionWithHttpInfo(knowledgeBaseId, documentId, versionId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersion</returns>
        
        public ApiResponse< KnowledgeDocumentVersion > GetKnowledgeKnowledgebaseDocumentVersionWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersion: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersion: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersion</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentVersion> GetKnowledgeKnowledgebaseDocumentVersionAsync (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null)
        {
             ApiResponse<KnowledgeDocumentVersion> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVersionAsyncWithHttpInfo(knowledgeBaseId, documentId, versionId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersion)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersion>> GetKnowledgeKnowledgebaseDocumentVersionAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");
            
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersion");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersion: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersion: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get variation for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>KnowledgeDocumentVersionVariation</returns>
        
        public KnowledgeDocumentVersionVariation GetKnowledgeKnowledgebaseDocumentVersionVariation (string knowledgeBaseId, string documentId, string versionId, string variationId)
        {
             ApiResponse<KnowledgeDocumentVersionVariation> localVarResponse = GetKnowledgeKnowledgebaseDocumentVersionVariationWithHttpInfo(knowledgeBaseId, documentId, versionId, variationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get variation for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionVariation</returns>
        
        public ApiResponse< KnowledgeDocumentVersionVariation > GetKnowledgeKnowledgebaseDocumentVersionVariationWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string variationId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations/{variationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));
            if (variationId != null) localVarPathParams.Add("variationId", this.Configuration.ApiClient.ParameterToString(variationId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionVariation>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get variation for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>Task of KnowledgeDocumentVersionVariation</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentVersionVariation> GetKnowledgeKnowledgebaseDocumentVersionVariationAsync (string knowledgeBaseId, string documentId, string versionId, string variationId)
        {
             ApiResponse<KnowledgeDocumentVersionVariation> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVersionVariationAsyncWithHttpInfo(knowledgeBaseId, documentId, versionId, variationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get variation for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="variationId">Globally unique identifier for the document version variation.</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionVariation)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionVariation>> GetKnowledgeKnowledgebaseDocumentVersionVariationAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string variationId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariation");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations/{variationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));
            if (variationId != null) localVarPathParams.Add("variationId", this.Configuration.ApiClient.ParameterToString(variationId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionVariation>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get variations for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>KnowledgeDocumentVersionVariationListing</returns>
        
        public KnowledgeDocumentVersionVariationListing GetKnowledgeKnowledgebaseDocumentVersionVariations (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null)
        {
             ApiResponse<KnowledgeDocumentVersionVariationListing> localVarResponse = GetKnowledgeKnowledgebaseDocumentVersionVariationsWithHttpInfo(knowledgeBaseId, documentId, versionId, before, after, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get variations for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionVariationListing</returns>
        
        public ApiResponse< KnowledgeDocumentVersionVariationListing > GetKnowledgeKnowledgebaseDocumentVersionVariationsWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionVariationListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionVariationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionVariationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get variations for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersionVariationListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentVersionVariationListing> GetKnowledgeKnowledgebaseDocumentVersionVariationsAsync (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null)
        {
             ApiResponse<KnowledgeDocumentVersionVariationListing> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVersionVariationsAsyncWithHttpInfo(knowledgeBaseId, documentId, versionId, before, after, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get variations for the given document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="versionId">Globally unique identifier for the document version.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionVariationListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionVariationListing>> GetKnowledgeKnowledgebaseDocumentVersionVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string versionId, string before = null, string after = null, string pageSize = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");
            
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersionVariations");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersionVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionVariationListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionVariationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionVariationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get document versions. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentVersionListing</returns>
        
        public KnowledgeDocumentVersionListing GetKnowledgeKnowledgebaseDocumentVersions (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null)
        {
             ApiResponse<KnowledgeDocumentVersionListing> localVarResponse = GetKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document versions. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentVersionListing</returns>
        
        public ApiResponse< KnowledgeDocumentVersionListing > GetKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersions");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersions");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get document versions. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentVersionListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentVersionListing> GetKnowledgeKnowledgebaseDocumentVersionsAsync (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null)
        {
             ApiResponse<KnowledgeDocumentVersionListing> localVarResponse = await GetKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo(knowledgeBaseId, documentId, before, after, pageSize, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document versions. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersionListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersionListing>> GetKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, string before = null, string after = null, string pageSize = null, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersions");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocumentVersions");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersionListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersionListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersionListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>KnowledgeDocumentResponseListing</returns>
        
        public KnowledgeDocumentResponseListing GetKnowledgeKnowledgebaseDocuments (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null)
        {
             ApiResponse<KnowledgeDocumentResponseListing> localVarResponse = GetKnowledgeKnowledgebaseDocumentsWithHttpInfo(knowledgeBaseId, before, after, pageSize, interval, documentId, categoryId, includeSubcategories, includeDrafts, labelIds, expand, externalIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentResponseListing</returns>
        
        public ApiResponse< KnowledgeDocumentResponseListing > GetKnowledgeKnowledgebaseDocumentsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocuments");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (interval != null) localVarQueryParams.Add(new Tuple<string, string>("interval", this.Configuration.ApiClient.ParameterToString(interval)));
            if (documentId != null) documentId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("documentId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (categoryId != null) categoryId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("categoryId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (includeSubcategories != null) localVarQueryParams.Add(new Tuple<string, string>("includeSubcategories", this.Configuration.ApiClient.ParameterToString(includeSubcategories)));
            if (includeDrafts != null) localVarQueryParams.Add(new Tuple<string, string>("includeDrafts", this.Configuration.ApiClient.ParameterToString(includeDrafts)));
            if (labelIds != null) labelIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("labelIds", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (externalIds != null) externalIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("externalIds", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>Task of KnowledgeDocumentResponseListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentResponseListing> GetKnowledgeKnowledgebaseDocumentsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null)
        {
             ApiResponse<KnowledgeDocumentResponseListing> localVarResponse = await GetKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo(knowledgeBaseId, before, after, pageSize, interval, documentId, categoryId, includeSubcategories, includeDrafts, labelIds, expand, externalIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get documents. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="interval">Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="documentId">Retrieves the specified documents, comma separated values expected. (optional)</param>
        /// <param name="categoryId">If specified, retrieves documents associated with category ids, comma separated values expected. (optional)</param>
        /// <param name="includeSubcategories">Works along with &#39;categoryId&#39; query parameter. If specified, retrieves documents associated with category ids and its children categories. (optional)</param>
        /// <param name="includeDrafts">If includeDrafts is true, Documents in the draft state are also returned in the response. (optional)</param>
        /// <param name="labelIds">If specified, retrieves documents associated with label ids, comma separated values expected. (optional)</param>
        /// <param name="expand">The specified entity attributes will be filled. Comma separated values expected. (optional)</param>
        /// <param name="externalIds">If specified, retrieves documents associated with external ids, comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponseListing>> GetKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string interval = null, List<string> documentId = null, List<string> categoryId = null, bool? includeSubcategories = null, bool? includeDrafts = null, List<string> labelIds = null, List<string> expand = null, List<string> externalIds = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseDocuments");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (interval != null) localVarQueryParams.Add(new Tuple<string, string>("interval", this.Configuration.ApiClient.ParameterToString(interval)));
            if (documentId != null) documentId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("documentId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (categoryId != null) categoryId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("categoryId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (includeSubcategories != null) localVarQueryParams.Add(new Tuple<string, string>("includeSubcategories", this.Configuration.ApiClient.ParameterToString(includeSubcategories)));
            if (includeDrafts != null) localVarQueryParams.Add(new Tuple<string, string>("includeDrafts", this.Configuration.ApiClient.ParameterToString(includeDrafts)));
            if (labelIds != null) labelIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("labelIds", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (externalIds != null) externalIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("externalIds", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get export job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>KnowledgeExportJobResponse</returns>
        
        public KnowledgeExportJobResponse GetKnowledgeKnowledgebaseExportJob (string knowledgeBaseId, string exportJobId)
        {
             ApiResponse<KnowledgeExportJobResponse> localVarResponse = GetKnowledgeKnowledgebaseExportJobWithHttpInfo(knowledgeBaseId, exportJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get export job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>ApiResponse of KnowledgeExportJobResponse</returns>
        
        public ApiResponse< KnowledgeExportJobResponse > GetKnowledgeKnowledgebaseExportJobWithHttpInfo (string knowledgeBaseId, string exportJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseExportJob");
            // verify the required parameter 'exportJobId' is set
            if (exportJobId == null)
                throw new ApiException(400, "Missing required parameter 'exportJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseExportJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (exportJobId != null) localVarPathParams.Add("exportJobId", this.Configuration.ApiClient.ParameterToString(exportJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseExportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseExportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get export job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of KnowledgeExportJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeExportJobResponse> GetKnowledgeKnowledgebaseExportJobAsync (string knowledgeBaseId, string exportJobId)
        {
             ApiResponse<KnowledgeExportJobResponse> localVarResponse = await GetKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo(knowledgeBaseId, exportJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get export job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="exportJobId">Export job ID</param>
        /// <returns>Task of ApiResponse (KnowledgeExportJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeExportJobResponse>> GetKnowledgeKnowledgebaseExportJobAsyncWithHttpInfo (string knowledgeBaseId, string exportJobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseExportJob");
            
            // verify the required parameter 'exportJobId' is set
            if (exportJobId == null)
                throw new ApiException(400, "Missing required parameter 'exportJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseExportJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (exportJobId != null) localVarPathParams.Add("exportJobId", this.Configuration.ApiClient.ParameterToString(exportJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseExportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseExportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get import job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        public KnowledgeImportJobResponse GetKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId, List<string> expand = null)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = GetKnowledgeKnowledgebaseImportJobWithHttpInfo(knowledgeBaseId, importJobId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get import job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        public ApiResponse< KnowledgeImportJobResponse > GetKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseImportJob");
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseImportJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get import job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeImportJobResponse> GetKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId, List<string> expand = null)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = await GetKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo(knowledgeBaseId, importJobId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get import job report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> GetKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseImportJob");
            
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseImportJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>LabelResponse</returns>
        
        public LabelResponse GetKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId)
        {
             ApiResponse<LabelResponse> localVarResponse = GetKnowledgeKnowledgebaseLabelWithHttpInfo(knowledgeBaseId, labelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        public ApiResponse< LabelResponse > GetKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabel");
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabel");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of LabelResponse</returns>
        
        public async System.Threading.Tasks.Task<LabelResponse> GetKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId)
        {
             ApiResponse<LabelResponse> localVarResponse = await GetKnowledgeKnowledgebaseLabelAsyncWithHttpInfo(knowledgeBaseId, labelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> GetKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabel");
            
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabel");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get labels 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>LabelListing</returns>
        
        public LabelListing GetKnowledgeKnowledgebaseLabels (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null)
        {
             ApiResponse<LabelListing> localVarResponse = GetKnowledgeKnowledgebaseLabelsWithHttpInfo(knowledgeBaseId, before, after, pageSize, name, includeDocumentCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get labels 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>ApiResponse of LabelListing</returns>
        
        public ApiResponse< LabelListing > GetKnowledgeKnowledgebaseLabelsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabels");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabels: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabels: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelListing>(localVarStatusCode,
                localVarHeaders,
                (LabelListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get labels 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>Task of LabelListing</returns>
        
        public async System.Threading.Tasks.Task<LabelListing> GetKnowledgeKnowledgebaseLabelsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null)
        {
             ApiResponse<LabelListing> localVarResponse = await GetKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo(knowledgeBaseId, before, after, pageSize, name, includeDocumentCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get labels 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the labels that contains the given phrase in the name. (optional)</param>
        /// <param name="includeDocumentCount">If specified, retrieves the number of documents related to label. (optional)</param>
        /// <returns>Task of ApiResponse (LabelListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<LabelListing>> GetKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, string name = null, bool? includeDocumentCount = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLabels");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (includeDocumentCount != null) localVarQueryParams.Add(new Tuple<string, string>("includeDocumentCount", this.Configuration.ApiClient.ParameterToString(includeDocumentCount)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabels: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLabels: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelListing>(localVarStatusCode,
                localVarHeaders,
                (LabelListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>CategoryListing</returns>
        [Obsolete]
        public CategoryListing GetKnowledgeKnowledgebaseLanguageCategories (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null)
        {
             ApiResponse<CategoryListing> localVarResponse = GetKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>ApiResponse of CategoryListing</returns>
        [Obsolete]
        public ApiResponse< CategoryListing > GetKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategories");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategories");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryListing>(localVarStatusCode,
                localVarHeaders,
                (CategoryListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>Task of CategoryListing</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<CategoryListing> GetKnowledgeKnowledgebaseLanguageCategoriesAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null)
        {
             ApiResponse<CategoryListing> localVarResponse = await GetKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get categories 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="name">Filter to return the categories that starts with the given category name. (optional)</param>
        /// <returns>Task of ApiResponse (CategoryListing)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<CategoryListing>> GetKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string name = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategories");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategories");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryListing>(localVarStatusCode,
                localVarHeaders,
                (CategoryListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        public KnowledgeExtendedCategory GetKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = GetKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo(categoryId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public ApiResponse< KnowledgeExtendedCategory > GetKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeExtendedCategory> GetKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = await GetKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo(categoryId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> GetKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        public KnowledgeDocument GetKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = GetKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo(documentId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocument > GetKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocument> GetKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = await GetKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo(documentId, knowledgeBaseId, languageCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> GetKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get document content upload status 
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public KnowledgeDocumentContentUpload GetKnowledgeKnowledgebaseLanguageDocumentUpload (string documentId, string knowledgeBaseId, string languageCode, string uploadId)
        {
             ApiResponse<KnowledgeDocumentContentUpload> localVarResponse = GetKnowledgeKnowledgebaseLanguageDocumentUploadWithHttpInfo(documentId, knowledgeBaseId, languageCode, uploadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document content upload status 
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>ApiResponse of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocumentContentUpload > GetKnowledgeKnowledgebaseLanguageDocumentUploadWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, string uploadId)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new ApiException(400, "Missing required parameter 'uploadId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads/{uploadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (uploadId != null) localVarPathParams.Add("uploadId", this.Configuration.ApiClient.ParameterToString(uploadId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentUpload: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentUpload: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentContentUpload>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentContentUpload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentContentUpload)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get document content upload status 
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>Task of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocumentContentUpload> GetKnowledgeKnowledgebaseLanguageDocumentUploadAsync (string documentId, string knowledgeBaseId, string languageCode, string uploadId)
        {
             ApiResponse<KnowledgeDocumentContentUpload> localVarResponse = await GetKnowledgeKnowledgebaseLanguageDocumentUploadAsyncWithHttpInfo(documentId, knowledgeBaseId, languageCode, uploadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document content upload status 
        /// 
        /// GetKnowledgeKnowledgebaseLanguageDocumentUpload is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="uploadId">UploadId</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentContentUpload)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentContentUpload>> GetKnowledgeKnowledgebaseLanguageDocumentUploadAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, string uploadId)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new ApiException(400, "Missing required parameter 'uploadId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentUpload");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads/{uploadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (uploadId != null) localVarPathParams.Add("uploadId", this.Configuration.ApiClient.ParameterToString(uploadId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentUpload: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentUpload: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentContentUpload>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentContentUpload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentContentUpload)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>DocumentListing</returns>
        [Obsolete]
        public DocumentListing GetKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null)
        {
             ApiResponse<DocumentListing> localVarResponse = GetKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>ApiResponse of DocumentListing</returns>
        [Obsolete]
        public ApiResponse< DocumentListing > GetKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocuments");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocuments");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (categories != null) localVarQueryParams.Add(new Tuple<string, string>("categories", this.Configuration.ApiClient.ParameterToString(categories)));
            if (title != null) localVarQueryParams.Add(new Tuple<string, string>("title", this.Configuration.ApiClient.ParameterToString(title)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (sortOrder != null) localVarQueryParams.Add(new Tuple<string, string>("sortOrder", this.Configuration.ApiClient.ParameterToString(sortOrder)));
            if (documentIds != null) documentIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("documentIds", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>Task of DocumentListing</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<DocumentListing> GetKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null)
        {
             ApiResponse<DocumentListing> localVarResponse = await GetKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="categories">Filter by categories ids, comma separated values expected. (optional)</param>
        /// <param name="title">Filter by document title. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <param name="documentIds">Comma-separated list of document identifiers to fetch by. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentListing)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<DocumentListing>> GetKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string categories = null, string title = null, string sortBy = null, string sortOrder = null, List<string> documentIds = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocuments");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocuments");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (categories != null) localVarQueryParams.Add(new Tuple<string, string>("categories", this.Configuration.ApiClient.ParameterToString(categories)));
            if (title != null) localVarQueryParams.Add(new Tuple<string, string>("title", this.Configuration.ApiClient.ParameterToString(title)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (sortOrder != null) localVarQueryParams.Add(new Tuple<string, string>("sortOrder", this.Configuration.ApiClient.ParameterToString(sortOrder)));
            if (documentIds != null) documentIds.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("documentIds", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get import operation report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        public KnowledgeImport GetKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId)
        {
             ApiResponse<KnowledgeImport> localVarResponse = GetKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo(knowledgeBaseId, languageCode, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get import operation report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        public ApiResponse< KnowledgeImport > GetKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get import operation report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeImport> GetKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId)
        {
             ApiResponse<KnowledgeImport> localVarResponse = await GetKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo(knowledgeBaseId, languageCode, importId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get import operation report 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> GetKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageDocumentsImport");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get training detail 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        public KnowledgeTraining GetKnowledgeKnowledgebaseLanguageTraining (string knowledgeBaseId, string languageCode, string trainingId)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = GetKnowledgeKnowledgebaseLanguageTrainingWithHttpInfo(knowledgeBaseId, languageCode, trainingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get training detail 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        public ApiResponse< KnowledgeTraining > GetKnowledgeKnowledgebaseLanguageTrainingWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");
            // verify the required parameter 'trainingId' is set
            if (trainingId == null)
                throw new ApiException(400, "Missing required parameter 'trainingId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (trainingId != null) localVarPathParams.Add("trainingId", this.Configuration.ApiClient.ParameterToString(trainingId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTraining: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTraining: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get training detail 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeTraining> GetKnowledgeKnowledgebaseLanguageTrainingAsync (string knowledgeBaseId, string languageCode, string trainingId)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = await GetKnowledgeKnowledgebaseLanguageTrainingAsyncWithHttpInfo(knowledgeBaseId, languageCode, trainingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get training detail 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> GetKnowledgeKnowledgebaseLanguageTrainingAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");
            
            // verify the required parameter 'trainingId' is set
            if (trainingId == null)
                throw new ApiException(400, "Missing required parameter 'trainingId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTraining");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (trainingId != null) localVarPathParams.Add("trainingId", this.Configuration.ApiClient.ParameterToString(trainingId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTraining: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTraining: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get all trainings information for a knowledgebase 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>TrainingListing</returns>
        [Obsolete]
        public TrainingListing GetKnowledgeKnowledgebaseLanguageTrainings (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null)
        {
             ApiResponse<TrainingListing> localVarResponse = GetKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all trainings information for a knowledgebase 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>ApiResponse of TrainingListing</returns>
        [Obsolete]
        public ApiResponse< TrainingListing > GetKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTrainings");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTrainings");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (knowledgeDocumentsState != null) localVarQueryParams.Add(new Tuple<string, string>("knowledgeDocumentsState", this.Configuration.ApiClient.ParameterToString(knowledgeDocumentsState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<TrainingListing>(localVarStatusCode,
                localVarHeaders,
                (TrainingListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrainingListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get all trainings information for a knowledgebase 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>Task of TrainingListing</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<TrainingListing> GetKnowledgeKnowledgebaseLanguageTrainingsAsync (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null)
        {
             ApiResponse<TrainingListing> localVarResponse = await GetKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all trainings information for a knowledgebase 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="knowledgeDocumentsState">Return the training with the specified state of the trained documents. (optional)</param>
        /// <returns>Task of ApiResponse (TrainingListing)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<TrainingListing>> GetKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string before = null, string after = null, string limit = null, string pageSize = null, string knowledgeDocumentsState = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTrainings");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->GetKnowledgeKnowledgebaseLanguageTrainings");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (knowledgeDocumentsState != null) localVarQueryParams.Add(new Tuple<string, string>("knowledgeDocumentsState", this.Configuration.ApiClient.ParameterToString(knowledgeDocumentsState)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<TrainingListing>(localVarStatusCode,
                localVarHeaders,
                (TrainingListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrainingListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get operations 
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>OperationListing</returns>
        
        public OperationListing GetKnowledgeKnowledgebaseOperations (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null)
        {
             ApiResponse<OperationListing> localVarResponse = GetKnowledgeKnowledgebaseOperationsWithHttpInfo(knowledgeBaseId, before, after, pageSize, userId, type, status, interval, sourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get operations 
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>ApiResponse of OperationListing</returns>
        
        public ApiResponse< OperationListing > GetKnowledgeKnowledgebaseOperationsWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseOperations");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (userId != null) userId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("userId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (type != null) type.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("type", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (status != null) status.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("status", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (interval != null) localVarQueryParams.Add(new Tuple<string, string>("interval", this.Configuration.ApiClient.ParameterToString(interval)));
            if (sourceId != null) sourceId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("sourceId", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<OperationListing>(localVarStatusCode,
                localVarHeaders,
                (OperationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get operations 
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>Task of OperationListing</returns>
        
        public async System.Threading.Tasks.Task<OperationListing> GetKnowledgeKnowledgebaseOperationsAsync (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null)
        {
             ApiResponse<OperationListing> localVarResponse = await GetKnowledgeKnowledgebaseOperationsAsyncWithHttpInfo(knowledgeBaseId, before, after, pageSize, userId, type, status, interval, sourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get operations 
        /// 
        /// GetKnowledgeKnowledgebaseOperations is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 200. (optional)</param>
        /// <param name="userId">If specified, retrieves operations associated with user ids, comma separated values expected. (optional)</param>
        /// <param name="type">If specified, retrieves operations with specified operation type, comma separated values expected. (optional)</param>
        /// <param name="status">If specified, retrieves operations with specified operation status, comma separated values expected. (optional)</param>
        /// <param name="interval">Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional)</param>
        /// <param name="sourceId">If specified, retrieves operations associated with source ids, comma separated values expected. (optional)</param>
        /// <returns>Task of ApiResponse (OperationListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<OperationListing>> GetKnowledgeKnowledgebaseOperationsAsyncWithHttpInfo (string knowledgeBaseId, string before = null, string after = null, string pageSize = null, List<string> userId = null, List<string> type = null, List<string> status = null, string interval = null, List<string> sourceId = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseOperations");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (userId != null) userId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("userId", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (type != null) type.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("type", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (status != null) status.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("status", this.Configuration.ApiClient.ParameterToString(obj))); });
            if (interval != null) localVarQueryParams.Add(new Tuple<string, string>("interval", this.Configuration.ApiClient.ParameterToString(interval)));
            if (sourceId != null) sourceId.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("sourceId", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<OperationListing>(localVarStatusCode,
                localVarHeaders,
                (OperationListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get ids of operation creator users and oauth clients 
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>OperationCreatorUserResponse</returns>
        
        public OperationCreatorUserResponse GetKnowledgeKnowledgebaseOperationsUsersQuery (string knowledgeBaseId)
        {
             ApiResponse<OperationCreatorUserResponse> localVarResponse = GetKnowledgeKnowledgebaseOperationsUsersQueryWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ids of operation creator users and oauth clients 
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>ApiResponse of OperationCreatorUserResponse</returns>
        
        public ApiResponse< OperationCreatorUserResponse > GetKnowledgeKnowledgebaseOperationsUsersQueryWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseOperationsUsersQuery");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations/users/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperationsUsersQuery: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperationsUsersQuery: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<OperationCreatorUserResponse>(localVarStatusCode,
                localVarHeaders,
                (OperationCreatorUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationCreatorUserResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get ids of operation creator users and oauth clients 
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of OperationCreatorUserResponse</returns>
        
        public async System.Threading.Tasks.Task<OperationCreatorUserResponse> GetKnowledgeKnowledgebaseOperationsUsersQueryAsync (string knowledgeBaseId)
        {
             ApiResponse<OperationCreatorUserResponse> localVarResponse = await GetKnowledgeKnowledgebaseOperationsUsersQueryAsyncWithHttpInfo(knowledgeBaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ids of operation creator users and oauth clients 
        /// 
        /// GetKnowledgeKnowledgebaseOperationsUsersQuery is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <returns>Task of ApiResponse (OperationCreatorUserResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<OperationCreatorUserResponse>> GetKnowledgeKnowledgebaseOperationsUsersQueryAsyncWithHttpInfo (string knowledgeBaseId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseOperationsUsersQuery");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations/users/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperationsUsersQuery: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseOperationsUsersQuery: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<OperationCreatorUserResponse>(localVarStatusCode,
                localVarHeaders,
                (OperationCreatorUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationCreatorUserResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get parse job report 
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>KnowledgeParseJobResponse</returns>
        
        public KnowledgeParseJobResponse GetKnowledgeKnowledgebaseParseJob (string knowledgeBaseId, string parseJobId, List<string> expand = null)
        {
             ApiResponse<KnowledgeParseJobResponse> localVarResponse = GetKnowledgeKnowledgebaseParseJobWithHttpInfo(knowledgeBaseId, parseJobId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get parse job report 
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>ApiResponse of KnowledgeParseJobResponse</returns>
        
        public ApiResponse< KnowledgeParseJobResponse > GetKnowledgeKnowledgebaseParseJobWithHttpInfo (string knowledgeBaseId, string parseJobId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseParseJob");
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseParseJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseParseJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseParseJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeParseJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeParseJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeParseJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get parse job report 
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of KnowledgeParseJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeParseJobResponse> GetKnowledgeKnowledgebaseParseJobAsync (string knowledgeBaseId, string parseJobId, List<string> expand = null)
        {
             ApiResponse<KnowledgeParseJobResponse> localVarResponse = await GetKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo(knowledgeBaseId, parseJobId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get parse job report 
        /// 
        /// GetKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="expand">If expand contains &#39;urls&#39; downloadURL and failedEntitiesURL will be filled. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeParseJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeParseJobResponse>> GetKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, List<string> expand = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseParseJob");
            
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseParseJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseParseJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseParseJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeParseJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeParseJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeParseJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredGroup</returns>
        
        public UnansweredGroup GetKnowledgeKnowledgebaseUnansweredGroup (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredGroup> localVarResponse = GetKnowledgeKnowledgebaseUnansweredGroupWithHttpInfo(knowledgeBaseId, groupId, app, dateStart, dateEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredGroup</returns>
        
        public ApiResponse< UnansweredGroup > GetKnowledgeKnowledgebaseUnansweredGroupWithHttpInfo (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroup");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredGroup>(localVarStatusCode,
                localVarHeaders,
                (UnansweredGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredGroup)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredGroup</returns>
        
        public async System.Threading.Tasks.Task<UnansweredGroup> GetKnowledgeKnowledgebaseUnansweredGroupAsync (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredGroup> localVarResponse = await GetKnowledgeKnowledgebaseUnansweredGroupAsyncWithHttpInfo(knowledgeBaseId, groupId, app, dateStart, dateEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get knowledge base unanswered group for a particular groupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredGroup)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<UnansweredGroup>> GetKnowledgeKnowledgebaseUnansweredGroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroup");
            
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroup");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredGroup>(localVarStatusCode,
                localVarHeaders,
                (UnansweredGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredGroup)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredPhraseGroup</returns>
        
        public UnansweredPhraseGroup GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredPhraseGroup> localVarResponse = GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo(knowledgeBaseId, groupId, phraseGroupId, app, dateStart, dateEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredPhraseGroup</returns>
        
        public ApiResponse< UnansweredPhraseGroup > GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            // verify the required parameter 'phraseGroupId' is set
            if (phraseGroupId == null)
                throw new ApiException(400, "Missing required parameter 'phraseGroupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));
            if (phraseGroupId != null) localVarPathParams.Add("phraseGroupId", this.Configuration.ApiClient.ParameterToString(phraseGroupId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredPhraseGroup>(localVarStatusCode,
                localVarHeaders,
                (UnansweredPhraseGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredPhraseGroup)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredPhraseGroup</returns>
        
        public async System.Threading.Tasks.Task<UnansweredPhraseGroup> GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsync (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredPhraseGroup> localVarResponse = await GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo(knowledgeBaseId, groupId, phraseGroupId, app, dateStart, dateEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get knowledge base unanswered phrase group for a particular phraseGroupId 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be retrieved.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be retrieved.</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredPhraseGroup)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<UnansweredPhraseGroup>> GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            
            // verify the required parameter 'phraseGroupId' is set
            if (phraseGroupId == null)
                throw new ApiException(400, "Missing required parameter 'phraseGroupId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));
            if (phraseGroupId != null) localVarPathParams.Add("phraseGroupId", this.Configuration.ApiClient.ParameterToString(phraseGroupId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredPhraseGroup>(localVarStatusCode,
                localVarHeaders,
                (UnansweredPhraseGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredPhraseGroup)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get knowledge base unanswered groups 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>UnansweredGroups</returns>
        
        public UnansweredGroups GetKnowledgeKnowledgebaseUnansweredGroups (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredGroups> localVarResponse = GetKnowledgeKnowledgebaseUnansweredGroupsWithHttpInfo(knowledgeBaseId, app, dateStart, dateEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get knowledge base unanswered groups 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>ApiResponse of UnansweredGroups</returns>
        
        public ApiResponse< UnansweredGroups > GetKnowledgeKnowledgebaseUnansweredGroupsWithHttpInfo (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroups");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroups: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroups: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredGroups>(localVarStatusCode,
                localVarHeaders,
                (UnansweredGroups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredGroups)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get knowledge base unanswered groups 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of UnansweredGroups</returns>
        
        public async System.Threading.Tasks.Task<UnansweredGroups> GetKnowledgeKnowledgebaseUnansweredGroupsAsync (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null)
        {
             ApiResponse<UnansweredGroups> localVarResponse = await GetKnowledgeKnowledgebaseUnansweredGroupsAsyncWithHttpInfo(knowledgeBaseId, app, dateStart, dateEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get knowledge base unanswered groups 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="app">The app value to be used for filtering phrases. (optional)</param>
        /// <param name="dateStart">The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <param name="dateEnd">The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)</param>
        /// <returns>Task of ApiResponse (UnansweredGroups)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<UnansweredGroups>> GetKnowledgeKnowledgebaseUnansweredGroupsAsyncWithHttpInfo (string knowledgeBaseId, string app = null, String dateStart = null, String dateEnd = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUnansweredGroups");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (app != null) localVarQueryParams.Add(new Tuple<string, string>("app", this.Configuration.ApiClient.ParameterToString(app)));
            if (dateStart != null) localVarQueryParams.Add(new Tuple<string, string>("dateStart", this.Configuration.ApiClient.ParameterToString(dateStart)));
            if (dateEnd != null) localVarQueryParams.Add(new Tuple<string, string>("dateEnd", this.Configuration.ApiClient.ParameterToString(dateEnd)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroups: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUnansweredGroups: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredGroups>(localVarStatusCode,
                localVarHeaders,
                (UnansweredGroups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredGroups)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get content upload from URL job status 
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>GetUploadSourceUrlJobStatusResponse</returns>
        
        public GetUploadSourceUrlJobStatusResponse GetKnowledgeKnowledgebaseUploadsUrlsJob (string knowledgeBaseId, string jobId)
        {
             ApiResponse<GetUploadSourceUrlJobStatusResponse> localVarResponse = GetKnowledgeKnowledgebaseUploadsUrlsJobWithHttpInfo(knowledgeBaseId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content upload from URL job status 
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>ApiResponse of GetUploadSourceUrlJobStatusResponse</returns>
        
        public ApiResponse< GetUploadSourceUrlJobStatusResponse > GetKnowledgeKnowledgebaseUploadsUrlsJobWithHttpInfo (string knowledgeBaseId, string jobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUploadsUrlsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUploadsUrlsJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUploadsUrlsJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUploadsUrlsJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<GetUploadSourceUrlJobStatusResponse>(localVarStatusCode,
                localVarHeaders,
                (GetUploadSourceUrlJobStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUploadSourceUrlJobStatusResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get content upload from URL job status 
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>Task of GetUploadSourceUrlJobStatusResponse</returns>
        
        public async System.Threading.Tasks.Task<GetUploadSourceUrlJobStatusResponse> GetKnowledgeKnowledgebaseUploadsUrlsJobAsync (string knowledgeBaseId, string jobId)
        {
             ApiResponse<GetUploadSourceUrlJobStatusResponse> localVarResponse = await GetKnowledgeKnowledgebaseUploadsUrlsJobAsyncWithHttpInfo(knowledgeBaseId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content upload from URL job status 
        /// 
        /// GetKnowledgeKnowledgebaseUploadsUrlsJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="jobId">Upload job ID</param>
        /// <returns>Task of ApiResponse (GetUploadSourceUrlJobStatusResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<GetUploadSourceUrlJobStatusResponse>> GetKnowledgeKnowledgebaseUploadsUrlsJobAsyncWithHttpInfo (string knowledgeBaseId, string jobId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUploadsUrlsJob");
            
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling KnowledgeApi->GetKnowledgeKnowledgebaseUploadsUrlsJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUploadsUrlsJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebaseUploadsUrlsJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<GetUploadSourceUrlJobStatusResponse>(localVarStatusCode,
                localVarHeaders,
                (GetUploadSourceUrlJobStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUploadSourceUrlJobStatusResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Get knowledge bases 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>KnowledgeBaseListing</returns>
        
        public KnowledgeBaseListing GetKnowledgeKnowledgebases (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<KnowledgeBaseListing> localVarResponse = GetKnowledgeKnowledgebasesWithHttpInfo(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get knowledge bases 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>ApiResponse of KnowledgeBaseListing</returns>
        
        public ApiResponse< KnowledgeBaseListing > GetKnowledgeKnowledgebasesWithHttpInfo (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null)
        { 

            var localVarPath = "/api/v2/knowledge/knowledgebases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (coreLanguage != null) localVarQueryParams.Add(new Tuple<string, string>("coreLanguage", this.Configuration.ApiClient.ParameterToString(coreLanguage)));
            if (published != null) localVarQueryParams.Add(new Tuple<string, string>("published", this.Configuration.ApiClient.ParameterToString(published)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (sortOrder != null) localVarQueryParams.Add(new Tuple<string, string>("sortOrder", this.Configuration.ApiClient.ParameterToString(sortOrder)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBaseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBaseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBaseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Get knowledge bases 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>Task of KnowledgeBaseListing</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeBaseListing> GetKnowledgeKnowledgebasesAsync (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<KnowledgeBaseListing> localVarResponse = await GetKnowledgeKnowledgebasesAsyncWithHttpInfo(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get knowledge bases 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">The cursor that points to the start of the set of entities that has been returned. (optional)</param>
        /// <param name="after">The cursor that points to the end of the set of entities that has been returned. (optional)</param>
        /// <param name="limit">Number of entities to return. Maximum of 100. Deprecated in favour of pageSize (optional)</param>
        /// <param name="pageSize">Number of entities to return. Maximum of 100. (optional)</param>
        /// <param name="name">Filter by Name. (optional)</param>
        /// <param name="coreLanguage">Filter by core language. (optional)</param>
        /// <param name="published">Filter by published status. (optional)</param>
        /// <param name="sortBy">Sort by. (optional)</param>
        /// <param name="sortOrder">Sort Order. (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeBaseListing)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeBaseListing>> GetKnowledgeKnowledgebasesAsyncWithHttpInfo (string before = null, string after = null, string limit = null, string pageSize = null, string name = null, string coreLanguage = null, bool? published = null, string sortBy = null, string sortOrder = null)
        { 

            var localVarPath = "/api/v2/knowledge/knowledgebases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params
            if (before != null) localVarQueryParams.Add(new Tuple<string, string>("before", this.Configuration.ApiClient.ParameterToString(before)));
            if (after != null) localVarQueryParams.Add(new Tuple<string, string>("after", this.Configuration.ApiClient.ParameterToString(after)));
            if (limit != null) localVarQueryParams.Add(new Tuple<string, string>("limit", this.Configuration.ApiClient.ParameterToString(limit)));
            if (pageSize != null) localVarQueryParams.Add(new Tuple<string, string>("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)));
            if (name != null) localVarQueryParams.Add(new Tuple<string, string>("name", this.Configuration.ApiClient.ParameterToString(name)));
            if (coreLanguage != null) localVarQueryParams.Add(new Tuple<string, string>("coreLanguage", this.Configuration.ApiClient.ParameterToString(coreLanguage)));
            if (published != null) localVarQueryParams.Add(new Tuple<string, string>("published", this.Configuration.ApiClient.ParameterToString(published)));
            if (sortBy != null) localVarQueryParams.Add(new Tuple<string, string>("sortBy", this.Configuration.ApiClient.ParameterToString(sortBy)));
            if (sortOrder != null) localVarQueryParams.Add(new Tuple<string, string>("sortOrder", this.Configuration.ApiClient.ParameterToString(sortOrder)));

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetKnowledgeKnowledgebases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBaseListing>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBaseListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBaseListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        public void PatchKnowledgeGuestSessionDocumentsSearchSearchId (string sessionId, string searchId, SearchUpdateRequest body)
        {
             PatchKnowledgeGuestSessionDocumentsSearchSearchIdWithHttpInfo(sessionId, searchId, body);
        }

        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PatchKnowledgeGuestSessionDocumentsSearchSearchIdWithHttpInfo (string sessionId, string searchId, SearchUpdateRequest body)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeGuestSessionDocumentsSearchSearchId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeGuestSessionDocumentsSearchSearchId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PatchKnowledgeGuestSessionDocumentsSearchSearchIdAsync (string sessionId, string searchId, SearchUpdateRequest body)
        {
             await PatchKnowledgeGuestSessionDocumentsSearchSearchIdAsyncWithHttpInfo(sessionId, searchId, body);

        }

        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeGuestSessionDocumentsSearchSearchIdAsyncWithHttpInfo (string sessionId, string searchId, SearchUpdateRequest body)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");
            
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeGuestSessionDocumentsSearchSearchId");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeGuestSessionDocumentsSearchSearchId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeGuestSessionDocumentsSearchSearchId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeBase</returns>
        
        public KnowledgeBase PatchKnowledgeKnowledgebase (string knowledgeBaseId, KnowledgeBaseUpdateRequest body)
        {
             ApiResponse<KnowledgeBase> localVarResponse = PatchKnowledgeKnowledgebaseWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        public ApiResponse< KnowledgeBase > PatchKnowledgeKnowledgebaseWithHttpInfo (string knowledgeBaseId, KnowledgeBaseUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebase");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebase");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeBase</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeBase> PatchKnowledgeKnowledgebaseAsync (string knowledgeBaseId, KnowledgeBaseUpdateRequest body)
        {
             ApiResponse<KnowledgeBase> localVarResponse = await PatchKnowledgeKnowledgebaseAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> PatchKnowledgeKnowledgebaseAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeBaseUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebase");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebase");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebase: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebase: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>CategoryResponse</returns>
        
        public CategoryResponse PatchKnowledgeKnowledgebaseCategory (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body)
        {
             ApiResponse<CategoryResponse> localVarResponse = PatchKnowledgeKnowledgebaseCategoryWithHttpInfo(knowledgeBaseId, categoryId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        public ApiResponse< CategoryResponse > PatchKnowledgeKnowledgebaseCategoryWithHttpInfo (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>Task of CategoryResponse</returns>
        
        public async System.Threading.Tasks.Task<CategoryResponse> PatchKnowledgeKnowledgebaseCategoryAsync (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body)
        {
             ApiResponse<CategoryResponse> localVarResponse = await PatchKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo(knowledgeBaseId, categoryId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="categoryId">Category ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> PatchKnowledgeKnowledgebaseCategoryAsyncWithHttpInfo (string knowledgeBaseId, string categoryId, CategoryUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");
            
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        public KnowledgeDocumentResponse PatchKnowledgeKnowledgebaseDocument (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = PatchKnowledgeKnowledgebaseDocumentWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        public ApiResponse< KnowledgeDocumentResponse > PatchKnowledgeKnowledgebaseDocumentWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentResponse> PatchKnowledgeKnowledgebaseDocumentAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = await PatchKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> PatchKnowledgeKnowledgebaseDocumentAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentReq body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>DocumentVariation</returns>
        
        public DocumentVariation PatchKnowledgeKnowledgebaseDocumentVariation (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body)
        {
             ApiResponse<DocumentVariation> localVarResponse = PatchKnowledgeKnowledgebaseDocumentVariationWithHttpInfo(documentVariationId, documentId, knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        public ApiResponse< DocumentVariation > PatchKnowledgeKnowledgebaseDocumentVariationWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentVariation</returns>
        
        public async System.Threading.Tasks.Task<DocumentVariation> PatchKnowledgeKnowledgebaseDocumentVariationAsync (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body)
        {
             ApiResponse<DocumentVariation> localVarResponse = await PatchKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo(documentVariationId, documentId, knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentVariationId">Globally unique identifier for a document variation.</param>
        /// <param name="documentId">Globally unique identifier for a document.</param>
        /// <param name="knowledgeBaseId">Globally unique identifier for a knowledge base.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> PatchKnowledgeKnowledgebaseDocumentVariationAsyncWithHttpInfo (string documentVariationId, string documentId, string knowledgeBaseId, DocumentVariation body)
        { 
            // verify the required parameter 'documentVariationId' is set
            if (documentVariationId == null)
                throw new ApiException(400, "Missing required parameter 'documentVariationId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentVariation");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentVariationId != null) localVarPathParams.Add("documentVariationId", this.Configuration.ApiClient.ParameterToString(documentVariationId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentVariation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PatchKnowledgeKnowledgebaseDocumentsSearchSearchId (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null)
        {
             PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdWithHttpInfo(knowledgeBaseId, searchId, body);
        }

        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdWithHttpInfo (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentsSearchSearchId");
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentsSearchSearchId");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentsSearchSearchId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentsSearchSearchId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdAsync (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null)
        {
             await PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdAsyncWithHttpInfo(knowledgeBaseId, searchId, body);

        }

        /// <summary>
        /// Update search result. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="searchId">Search Result ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeKnowledgebaseDocumentsSearchSearchIdAsyncWithHttpInfo (string knowledgeBaseId, string searchId, SearchUpdateRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentsSearchSearchId");
            
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseDocumentsSearchSearchId");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentsSearchSearchId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseDocumentsSearchSearchId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Start import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        public KnowledgeImportJobResponse PatchKnowledgeKnowledgebaseImportJob (string knowledgeBaseId, string importJobId, ImportStatusRequest body)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = PatchKnowledgeKnowledgebaseImportJobWithHttpInfo(knowledgeBaseId, importJobId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        public ApiResponse< KnowledgeImportJobResponse > PatchKnowledgeKnowledgebaseImportJobWithHttpInfo (string knowledgeBaseId, string importJobId, ImportStatusRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Start import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeImportJobResponse> PatchKnowledgeKnowledgebaseImportJobAsync (string knowledgeBaseId, string importJobId, ImportStatusRequest body)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = await PatchKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo(knowledgeBaseId, importJobId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="importJobId">Import job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> PatchKnowledgeKnowledgebaseImportJobAsyncWithHttpInfo (string knowledgeBaseId, string importJobId, ImportStatusRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");
            
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseImportJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseImportJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseImportJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>LabelResponse</returns>
        
        public LabelResponse PatchKnowledgeKnowledgebaseLabel (string knowledgeBaseId, string labelId, LabelUpdateRequest body)
        {
             ApiResponse<LabelResponse> localVarResponse = PatchKnowledgeKnowledgebaseLabelWithHttpInfo(knowledgeBaseId, labelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        public ApiResponse< LabelResponse > PatchKnowledgeKnowledgebaseLabelWithHttpInfo (string knowledgeBaseId, string labelId, LabelUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>Task of LabelResponse</returns>
        
        public async System.Threading.Tasks.Task<LabelResponse> PatchKnowledgeKnowledgebaseLabelAsync (string knowledgeBaseId, string labelId, LabelUpdateRequest body)
        {
             ApiResponse<LabelResponse> localVarResponse = await PatchKnowledgeKnowledgebaseLabelAsyncWithHttpInfo(knowledgeBaseId, labelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="labelId">Label ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PatchKnowledgeKnowledgebaseLabelAsyncWithHttpInfo (string knowledgeBaseId, string labelId, LabelUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");
            
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLabel");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (labelId != null) localVarPathParams.Add("labelId", this.Configuration.ApiClient.ParameterToString(labelId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLabel: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLabel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        public KnowledgeExtendedCategory PatchKnowledgeKnowledgebaseLanguageCategory (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = PatchKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo(categoryId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public ApiResponse< KnowledgeExtendedCategory > PatchKnowledgeKnowledgebaseLanguageCategoryWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeExtendedCategory> PatchKnowledgeKnowledgebaseLanguageCategoryAsync (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = await PatchKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo(categoryId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Category ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> PatchKnowledgeKnowledgebaseLanguageCategoryAsyncWithHttpInfo (string categoryId, string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        { 
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageCategory");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageCategory: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        public KnowledgeDocument PatchKnowledgeKnowledgebaseLanguageDocument (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = PatchKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo(documentId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocument > PatchKnowledgeKnowledgebaseLanguageDocumentWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocument> PatchKnowledgeKnowledgebaseLanguageDocumentAsync (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = await PatchKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo(documentId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> PatchKnowledgeKnowledgebaseLanguageDocumentAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocument");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocument: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update documents collection 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>DocumentListing</returns>
        [Obsolete]
        public DocumentListing PatchKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body)
        {
             ApiResponse<DocumentListing> localVarResponse = PatchKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update documents collection 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentListing</returns>
        [Obsolete]
        public ApiResponse< DocumentListing > PatchKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update documents collection 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentListing</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<DocumentListing> PatchKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body)
        {
             ApiResponse<DocumentListing> localVarResponse = await PatchKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update documents collection 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentListing)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<DocumentListing>> PatchKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, List<KnowledgeDocumentBulkRequest> body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocuments");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentListing>(localVarStatusCode,
                localVarHeaders,
                (DocumentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListing)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Start import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        public KnowledgeImport PatchKnowledgeKnowledgebaseLanguageDocumentsImport (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body)
        {
             ApiResponse<KnowledgeImport> localVarResponse = PatchKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo(knowledgeBaseId, languageCode, importId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        public ApiResponse< KnowledgeImport > PatchKnowledgeKnowledgebaseLanguageDocumentsImportWithHttpInfo (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Start import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeImport> PatchKnowledgeKnowledgebaseLanguageDocumentsImportAsync (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body)
        {
             ApiResponse<KnowledgeImport> localVarResponse = await PatchKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo(knowledgeBaseId, languageCode, importId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="importId">Import ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> PatchKnowledgeKnowledgebaseLanguageDocumentsImportAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string importId, ImportStatusRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseLanguageDocumentsImport");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (importId != null) localVarPathParams.Add("importId", this.Configuration.ApiClient.ParameterToString(importId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseLanguageDocumentsImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Send update to the parse operation 
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        public void PatchKnowledgeKnowledgebaseParseJob (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body)
        {
             PatchKnowledgeKnowledgebaseParseJobWithHttpInfo(knowledgeBaseId, parseJobId, body);
        }

        /// <summary>
        /// Send update to the parse operation 
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PatchKnowledgeKnowledgebaseParseJobWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseParseJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseParseJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Send update to the parse operation 
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PatchKnowledgeKnowledgebaseParseJobAsync (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body)
        {
             await PatchKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo(knowledgeBaseId, parseJobId, body);

        }

        /// <summary>
        /// Send update to the parse operation 
        /// 
        /// PatchKnowledgeKnowledgebaseParseJob is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchKnowledgeKnowledgebaseParseJobAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestPatch body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");
            
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseParseJob");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseParseJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseParseJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Update a Knowledge base unanswered phrase group 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>UnansweredPhraseGroupUpdateResponse</returns>
        
        public UnansweredPhraseGroupUpdateResponse PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body)
        {
             ApiResponse<UnansweredPhraseGroupUpdateResponse> localVarResponse = PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo(knowledgeBaseId, groupId, phraseGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Knowledge base unanswered phrase group 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>ApiResponse of UnansweredPhraseGroupUpdateResponse</returns>
        
        public ApiResponse< UnansweredPhraseGroupUpdateResponse > PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            // verify the required parameter 'phraseGroupId' is set
            if (phraseGroupId == null)
                throw new ApiException(400, "Missing required parameter 'phraseGroupId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));
            if (phraseGroupId != null) localVarPathParams.Add("phraseGroupId", this.Configuration.ApiClient.ParameterToString(phraseGroupId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredPhraseGroupUpdateResponse>(localVarStatusCode,
                localVarHeaders,
                (UnansweredPhraseGroupUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredPhraseGroupUpdateResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Update a Knowledge base unanswered phrase group 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>Task of UnansweredPhraseGroupUpdateResponse</returns>
        
        public async System.Threading.Tasks.Task<UnansweredPhraseGroupUpdateResponse> PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsync (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body)
        {
             ApiResponse<UnansweredPhraseGroupUpdateResponse> localVarResponse = await PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo(knowledgeBaseId, groupId, phraseGroupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Knowledge base unanswered phrase group 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="groupId">The ID of the group to be updated.</param>
        /// <param name="phraseGroupId">The ID of the phraseGroup to be updated.</param>
        /// <param name="body">Request body of the update unanswered group endpoint.</param>
        /// <returns>Task of ApiResponse (UnansweredPhraseGroupUpdateResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<UnansweredPhraseGroupUpdateResponse>> PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroupAsyncWithHttpInfo (string knowledgeBaseId, string groupId, string phraseGroupId, UnansweredPhraseGroupPatchRequestBody body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            
            // verify the required parameter 'phraseGroupId' is set
            if (phraseGroupId == null)
                throw new ApiException(400, "Missing required parameter 'phraseGroupId' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId));
            if (phraseGroupId != null) localVarPathParams.Add("phraseGroupId", this.Configuration.ApiClient.ParameterToString(phraseGroupId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PatchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UnansweredPhraseGroupUpdateResponse>(localVarStatusCode,
                localVarHeaders,
                (UnansweredPhraseGroupUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnansweredPhraseGroupUpdateResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>UploadUrlResponse</returns>
        
        public UploadUrlResponse PostKnowledgeDocumentuploads (UploadUrlRequest body)
        {
             ApiResponse<UploadUrlResponse> localVarResponse = PostKnowledgeDocumentuploadsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>ApiResponse of UploadUrlResponse</returns>
        
        public ApiResponse< UploadUrlResponse > PostKnowledgeDocumentuploadsWithHttpInfo (UploadUrlRequest body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeDocumentuploads");

            var localVarPath = "/api/v2/knowledge/documentuploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeDocumentuploads: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeDocumentuploads: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UploadUrlResponse>(localVarStatusCode,
                localVarHeaders,
                (UploadUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadUrlResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>Task of UploadUrlResponse</returns>
        
        public async System.Threading.Tasks.Task<UploadUrlResponse> PostKnowledgeDocumentuploadsAsync (UploadUrlRequest body)
        {
             ApiResponse<UploadUrlResponse> localVarResponse = await PostKnowledgeDocumentuploadsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a presigned URL for uploading a knowledge import file with a set of documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">query</param>
        /// <returns>Task of ApiResponse (UploadUrlResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<UploadUrlResponse>> PostKnowledgeDocumentuploadsAsyncWithHttpInfo (UploadUrlRequest body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeDocumentuploads");
            

            var localVarPath = "/api/v2/knowledge/documentuploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeDocumentuploads: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeDocumentuploads: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UploadUrlResponse>(localVarStatusCode,
                localVarHeaders,
                (UploadUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadUrlResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeGuestSessionDocumentCopies (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null)
        {
             PostKnowledgeGuestSessionDocumentCopiesWithHttpInfo(sessionId, documentId, body);
        }

        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeGuestSessionDocumentCopiesWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentCopies");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentCopies");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/copies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentCopies: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentCopies: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentCopiesAsync (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null)
        {
             await PostKnowledgeGuestSessionDocumentCopiesAsyncWithHttpInfo(sessionId, documentId, body);

        }

        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentCopiesAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentCopy body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentCopies");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentCopies");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/copies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentCopies: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentCopies: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeGuestDocumentFeedback</returns>
        
        public KnowledgeGuestDocumentFeedback PostKnowledgeGuestSessionDocumentFeedback (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null)
        {
             ApiResponse<KnowledgeGuestDocumentFeedback> localVarResponse = PostKnowledgeGuestSessionDocumentFeedbackWithHttpInfo(sessionId, documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentFeedback</returns>
        
        public ApiResponse< KnowledgeGuestDocumentFeedback > PostKnowledgeGuestSessionDocumentFeedbackWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentFeedback");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentFeedback");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentFeedback>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentFeedback) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentFeedback)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentFeedback</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeGuestDocumentFeedback> PostKnowledgeGuestSessionDocumentFeedbackAsync (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null)
        {
             ApiResponse<KnowledgeGuestDocumentFeedback> localVarResponse = await PostKnowledgeGuestSessionDocumentFeedbackAsyncWithHttpInfo(sessionId, documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentFeedback)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentFeedback>> PostKnowledgeGuestSessionDocumentFeedbackAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentFeedback body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentFeedback");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentFeedback");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentFeedback>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentFeedback) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentFeedback)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create view event for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeGuestSessionDocumentViews (string sessionId, string documentId, KnowledgeGuestDocumentView body = null)
        {
             PostKnowledgeGuestSessionDocumentViewsWithHttpInfo(sessionId, documentId, body);
        }

        /// <summary>
        /// Create view event for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeGuestSessionDocumentViewsWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentView body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentViews");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentViews");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentViews: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentViews: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create view event for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentViewsAsync (string sessionId, string documentId, KnowledgeGuestDocumentView body = null)
        {
             await PostKnowledgeGuestSessionDocumentViewsAsyncWithHttpInfo(sessionId, documentId, body);

        }

        /// <summary>
        /// Create view event for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="documentId">Document ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentViewsAsyncWithHttpInfo (string sessionId, string documentId, KnowledgeGuestDocumentView body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentViews");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentViews");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentViews: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentViews: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeGuestSessionDocumentsPresentations (string sessionId, KnowledgeGuestDocumentPresentation body = null)
        {
             PostKnowledgeGuestSessionDocumentsPresentationsWithHttpInfo(sessionId, body);
        }

        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeGuestSessionDocumentsPresentationsWithHttpInfo (string sessionId, KnowledgeGuestDocumentPresentation body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsPresentations");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/presentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsPresentations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsPresentations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeGuestSessionDocumentsPresentationsAsync (string sessionId, KnowledgeGuestDocumentPresentation body = null)
        {
             await PostKnowledgeGuestSessionDocumentsPresentationsAsyncWithHttpInfo(sessionId, body);

        }

        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeGuestSessionDocumentsPresentationsAsyncWithHttpInfo (string sessionId, KnowledgeGuestDocumentPresentation body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsPresentations");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/presentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsPresentations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsPresentations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Search the documents in a guest session. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentGuestSearch</returns>
        
        public KnowledgeDocumentGuestSearch PostKnowledgeGuestSessionDocumentsSearch (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null)
        {
             ApiResponse<KnowledgeDocumentGuestSearch> localVarResponse = PostKnowledgeGuestSessionDocumentsSearchWithHttpInfo(sessionId, expand, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search the documents in a guest session. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentGuestSearch</returns>
        
        public ApiResponse< KnowledgeDocumentGuestSearch > PostKnowledgeGuestSessionDocumentsSearchWithHttpInfo (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsSearch");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentGuestSearch>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentGuestSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentGuestSearch)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Search the documents in a guest session. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentGuestSearch</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentGuestSearch> PostKnowledgeGuestSessionDocumentsSearchAsync (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null)
        {
             ApiResponse<KnowledgeDocumentGuestSearch> localVarResponse = await PostKnowledgeGuestSessionDocumentsSearchAsyncWithHttpInfo(sessionId, expand, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search the documents in a guest session. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentGuestSearch)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentGuestSearch>> PostKnowledgeGuestSessionDocumentsSearchAsyncWithHttpInfo (string sessionId, List<string> expand = null, KnowledgeDocumentGuestSearchRequest body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsSearch");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentGuestSearch>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentGuestSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentGuestSearch)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeGuestDocumentSuggestion</returns>
        
        public KnowledgeGuestDocumentSuggestion PostKnowledgeGuestSessionDocumentsSearchSuggestions (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null)
        {
             ApiResponse<KnowledgeGuestDocumentSuggestion> localVarResponse = PostKnowledgeGuestSessionDocumentsSearchSuggestionsWithHttpInfo(sessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeGuestDocumentSuggestion</returns>
        
        public ApiResponse< KnowledgeGuestDocumentSuggestion > PostKnowledgeGuestSessionDocumentsSearchSuggestionsWithHttpInfo (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsSearchSuggestions");

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearchSuggestions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearchSuggestions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentSuggestion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentSuggestion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeGuestDocumentSuggestion</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeGuestDocumentSuggestion> PostKnowledgeGuestSessionDocumentsSearchSuggestionsAsync (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null)
        {
             ApiResponse<KnowledgeGuestDocumentSuggestion> localVarResponse = await PostKnowledgeGuestSessionDocumentsSearchSuggestionsAsyncWithHttpInfo(sessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">Knowledge guest session ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeGuestDocumentSuggestion)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestDocumentSuggestion>> PostKnowledgeGuestSessionDocumentsSearchSuggestionsAsyncWithHttpInfo (string sessionId, KnowledgeGuestDocumentSuggestionRequest body = null)
        { 
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling KnowledgeApi->PostKnowledgeGuestSessionDocumentsSearchSuggestions");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearchSuggestions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessionDocumentsSearchSuggestions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestDocumentSuggestion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestDocumentSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestDocumentSuggestion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create guest session 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>KnowledgeGuestSession</returns>
        
        public KnowledgeGuestSession PostKnowledgeGuestSessions (KnowledgeGuestSession body)
        {
             ApiResponse<KnowledgeGuestSession> localVarResponse = PostKnowledgeGuestSessionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create guest session 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeGuestSession</returns>
        
        public ApiResponse< KnowledgeGuestSession > PostKnowledgeGuestSessionsWithHttpInfo (KnowledgeGuestSession body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeGuestSessions");

            var localVarPath = "/api/v2/knowledge/guest/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestSession>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestSession)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create guest session 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeGuestSession</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeGuestSession> PostKnowledgeGuestSessionsAsync (KnowledgeGuestSession body)
        {
             ApiResponse<KnowledgeGuestSession> localVarResponse = await PostKnowledgeGuestSessionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create guest session 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeGuestSession)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeGuestSession>> PostKnowledgeGuestSessionsAsyncWithHttpInfo (KnowledgeGuestSession body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeGuestSessions");
            

            var localVarPath = "/api/v2/knowledge/guest/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeGuestSessions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeGuestSession>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeGuestSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeGuestSession)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>CategoryResponse</returns>
        
        public CategoryResponse PostKnowledgeKnowledgebaseCategories (string knowledgeBaseId, CategoryCreateRequest body)
        {
             ApiResponse<CategoryResponse> localVarResponse = PostKnowledgeKnowledgebaseCategoriesWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        
        public ApiResponse< CategoryResponse > PostKnowledgeKnowledgebaseCategoriesWithHttpInfo (string knowledgeBaseId, CategoryCreateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseCategories");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseCategories");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of CategoryResponse</returns>
        
        public async System.Threading.Tasks.Task<CategoryResponse> PostKnowledgeKnowledgebaseCategoriesAsync (string knowledgeBaseId, CategoryCreateRequest body)
        {
             ApiResponse<CategoryResponse> localVarResponse = await PostKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> PostKnowledgeKnowledgebaseCategoriesAsyncWithHttpInfo (string knowledgeBaseId, CategoryCreateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseCategories");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseCategories");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarHeaders,
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeKnowledgebaseDocumentCopies (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null)
        {
             PostKnowledgeKnowledgebaseDocumentCopiesWithHttpInfo(knowledgeBaseId, documentId, body);
        }

        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentCopiesWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentCopies");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentCopies");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/copies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentCopies: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentCopies: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentCopiesAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null)
        {
             await PostKnowledgeKnowledgebaseDocumentCopiesAsyncWithHttpInfo(knowledgeBaseId, documentId, body);

        }

        /// <summary>
        /// Indicate that the document was copied by the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentCopiesAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentCopy body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentCopies");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentCopies");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/copies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentCopies: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentCopies: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentFeedbackResponse</returns>
        
        public KnowledgeDocumentFeedbackResponse PostKnowledgeKnowledgebaseDocumentFeedback (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponse> localVarResponse = PostKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentFeedbackResponse</returns>
        
        public ApiResponse< KnowledgeDocumentFeedbackResponse > PostKnowledgeKnowledgebaseDocumentFeedbackWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentFeedback");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentFeedback");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentFeedbackResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentFeedbackResponse> PostKnowledgeKnowledgebaseDocumentFeedbackAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null)
        {
             ApiResponse<KnowledgeDocumentFeedbackResponse> localVarResponse = await PostKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Give feedback on a document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentFeedbackResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentFeedbackResponse>> PostKnowledgeKnowledgebaseDocumentFeedbackAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentFeedback body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentFeedback");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentFeedback");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentFeedback: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentFeedbackResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentFeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentFeedbackResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>DocumentVariation</returns>
        
        public DocumentVariation PostKnowledgeKnowledgebaseDocumentVariations (string knowledgeBaseId, string documentId, DocumentVariation body)
        {
             ApiResponse<DocumentVariation> localVarResponse = PostKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DocumentVariation</returns>
        
        public ApiResponse< DocumentVariation > PostKnowledgeKnowledgebaseDocumentVariationsWithHttpInfo (string knowledgeBaseId, string documentId, DocumentVariation body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of DocumentVariation</returns>
        
        public async System.Threading.Tasks.Task<DocumentVariation> PostKnowledgeKnowledgebaseDocumentVariationsAsync (string knowledgeBaseId, string documentId, DocumentVariation body)
        {
             ApiResponse<DocumentVariation> localVarResponse = await PostKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a variation for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DocumentVariation)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<DocumentVariation>> PostKnowledgeKnowledgebaseDocumentVariationsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, DocumentVariation body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVariations");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVariations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DocumentVariation>(localVarStatusCode,
                localVarHeaders,
                (DocumentVariation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVariation)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Creates or restores a document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentVersion</returns>
        
        public KnowledgeDocumentVersion PostKnowledgeKnowledgebaseDocumentVersions (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body)
        {
             ApiResponse<KnowledgeDocumentVersion> localVarResponse = PostKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or restores a document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentVersion</returns>
        
        public ApiResponse< KnowledgeDocumentVersion > PostKnowledgeKnowledgebaseDocumentVersionsWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Creates or restores a document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentVersion</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentVersion> PostKnowledgeKnowledgebaseDocumentVersionsAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body)
        {
             ApiResponse<KnowledgeDocumentVersion> localVarResponse = await PostKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo(knowledgeBaseId, documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates or restores a document version. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Globally unique identifier for the knowledge base.</param>
        /// <param name="documentId">Globally unique identifier for the document.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentVersion)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentVersion>> PostKnowledgeKnowledgebaseDocumentVersionsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentVersion body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentVersions");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentVersion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentVersion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create view for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeKnowledgebaseDocumentViews (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null)
        {
             PostKnowledgeKnowledgebaseDocumentViewsWithHttpInfo(knowledgeBaseId, documentId, body);
        }

        /// <summary>
        /// Create view for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentViewsWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentViews");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentViews");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentViews: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentViews: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create view for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentViewsAsync (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null)
        {
             await PostKnowledgeKnowledgebaseDocumentViewsAsyncWithHttpInfo(knowledgeBaseId, documentId, body);

        }

        /// <summary>
        /// Create view for a document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="documentId">Document ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentViewsAsyncWithHttpInfo (string knowledgeBaseId, string documentId, KnowledgeDocumentView body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentViews");
            
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentViews");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentViews: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentViews: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentResponse</returns>
        
        public KnowledgeDocumentResponse PostKnowledgeKnowledgebaseDocuments (string knowledgeBaseId, KnowledgeDocumentReq body)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = PostKnowledgeKnowledgebaseDocumentsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentResponse</returns>
        
        public ApiResponse< KnowledgeDocumentResponse > PostKnowledgeKnowledgebaseDocumentsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentReq body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocuments");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocuments");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentResponse> PostKnowledgeKnowledgebaseDocumentsAsync (string knowledgeBaseId, KnowledgeDocumentReq body)
        {
             ApiResponse<KnowledgeDocumentResponse> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create document. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentResponse>> PostKnowledgeKnowledgebaseDocumentsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentReq body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocuments");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocuments");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Bulk remove documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        public BulkResponse PostKnowledgeKnowledgebaseDocumentsBulkRemove (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = PostKnowledgeKnowledgebaseDocumentsBulkRemoveWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk remove documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        public ApiResponse< BulkResponse > PostKnowledgeKnowledgebaseDocumentsBulkRemoveWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkRemove");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkRemove");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkRemove: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkRemove: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Bulk remove documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        public async System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkRemoveAsync (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsBulkRemoveAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk remove documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkRemove is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsBulkRemoveAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkRemoveRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkRemove");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkRemove");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkRemove: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkRemove: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Bulk update documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        public BulkResponse PostKnowledgeKnowledgebaseDocumentsBulkUpdate (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = PostKnowledgeKnowledgebaseDocumentsBulkUpdateWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk update documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        public ApiResponse< BulkResponse > PostKnowledgeKnowledgebaseDocumentsBulkUpdateWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkUpdate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkUpdate");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkUpdate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkUpdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Bulk update documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        public async System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsBulkUpdateAsync (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsBulkUpdateAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk update documents. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsBulkUpdate is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsBulkUpdateAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkUpdateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkUpdate");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsBulkUpdate");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkUpdate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsBulkUpdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        
        public void PostKnowledgeKnowledgebaseDocumentsPresentations (string knowledgeBaseId, KnowledgeDocumentPresentation body = null)
        {
             PostKnowledgeKnowledgebaseDocumentsPresentationsWithHttpInfo(knowledgeBaseId, body);
        }

        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeKnowledgebaseDocumentsPresentationsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentPresentation body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsPresentations");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/presentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsPresentations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsPresentations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeKnowledgebaseDocumentsPresentationsAsync (string knowledgeBaseId, KnowledgeDocumentPresentation body = null)
        {
             await PostKnowledgeKnowledgebaseDocumentsPresentationsAsyncWithHttpInfo(knowledgeBaseId, body);

        }

        /// <summary>
        /// Indicate that documents were presented to the user. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseDocumentsPresentationsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentPresentation body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsPresentations");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/presentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsPresentations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsPresentations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Search the documents in a knowledge base. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentSearch</returns>
        
        public KnowledgeDocumentSearch PostKnowledgeKnowledgebaseDocumentsSearch (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null)
        {
             ApiResponse<KnowledgeDocumentSearch> localVarResponse = PostKnowledgeKnowledgebaseDocumentsSearchWithHttpInfo(knowledgeBaseId, expand, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search the documents in a knowledge base. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentSearch</returns>
        
        public ApiResponse< KnowledgeDocumentSearch > PostKnowledgeKnowledgebaseDocumentsSearchWithHttpInfo (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsSearch");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentSearch>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentSearch)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Search the documents in a knowledge base. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentSearch</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentSearch> PostKnowledgeKnowledgebaseDocumentsSearchAsync (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null)
        {
             ApiResponse<KnowledgeDocumentSearch> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsSearchAsyncWithHttpInfo(knowledgeBaseId, expand, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search the documents in a knowledge base. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="expand">Fields, if any, to expand for each document in the search result matching the query. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentSearch)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentSearch>> PostKnowledgeKnowledgebaseDocumentsSearchAsyncWithHttpInfo (string knowledgeBaseId, List<string> expand = null, KnowledgeDocumentSearchRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsSearch");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params
            if (expand != null) expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", this.Configuration.ApiClient.ParameterToString(obj))); });

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentSearch>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentSearch)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeDocumentSuggestion</returns>
        
        public KnowledgeDocumentSuggestion PostKnowledgeKnowledgebaseDocumentsSearchSuggestions (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null)
        {
             ApiResponse<KnowledgeDocumentSuggestion> localVarResponse = PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeDocumentSuggestion</returns>
        
        public ApiResponse< KnowledgeDocumentSuggestion > PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsSearchSuggestions");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearchSuggestions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearchSuggestions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentSuggestion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentSuggestion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeDocumentSuggestion</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeDocumentSuggestion> PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsAsync (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null)
        {
             ApiResponse<KnowledgeDocumentSuggestion> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the knowledge documents to provide suggestions for auto completion. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">The ID of knowledge base containing the documents to query.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentSuggestion)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentSuggestion>> PostKnowledgeKnowledgebaseDocumentsSearchSuggestionsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentSuggestionRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsSearchSuggestions");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearchSuggestions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsSearchSuggestions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentSuggestion>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentSuggestion)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Bulk add document versions. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        
        public BulkResponse PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk add document versions. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        
        public ApiResponse< BulkResponse > PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/versions/bulk/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Bulk add document versions. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of BulkResponse</returns>
        
        public async System.Threading.Tasks.Task<BulkResponse> PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddAsync (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body)
        {
             ApiResponse<BulkResponse> localVarResponse = await PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk add document versions. 
        /// 
        /// PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> PostKnowledgeKnowledgebaseDocumentsVersionsBulkAddAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeDocumentBulkVersionAddRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/versions/bulk/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseDocumentsVersionsBulkAdd: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarHeaders,
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExportJobResponse</returns>
        
        public KnowledgeExportJobResponse PostKnowledgeKnowledgebaseExportJobs (string knowledgeBaseId, KnowledgeExportJobRequest body)
        {
             ApiResponse<KnowledgeExportJobResponse> localVarResponse = PostKnowledgeKnowledgebaseExportJobsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExportJobResponse</returns>
        
        public ApiResponse< KnowledgeExportJobResponse > PostKnowledgeKnowledgebaseExportJobsWithHttpInfo (string knowledgeBaseId, KnowledgeExportJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseExportJobs");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseExportJobs");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseExportJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseExportJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExportJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeExportJobResponse> PostKnowledgeKnowledgebaseExportJobsAsync (string knowledgeBaseId, KnowledgeExportJobRequest body)
        {
             ApiResponse<KnowledgeExportJobResponse> localVarResponse = await PostKnowledgeKnowledgebaseExportJobsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create export job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExportJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeExportJobResponse>> PostKnowledgeKnowledgebaseExportJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeExportJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseExportJobs");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseExportJobs");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseExportJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseExportJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImportJobResponse</returns>
        
        public KnowledgeImportJobResponse PostKnowledgeKnowledgebaseImportJobs (string knowledgeBaseId, KnowledgeImportJobRequest body)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = PostKnowledgeKnowledgebaseImportJobsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImportJobResponse</returns>
        
        public ApiResponse< KnowledgeImportJobResponse > PostKnowledgeKnowledgebaseImportJobsWithHttpInfo (string knowledgeBaseId, KnowledgeImportJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseImportJobs");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseImportJobs");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseImportJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseImportJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImportJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeImportJobResponse> PostKnowledgeKnowledgebaseImportJobsAsync (string knowledgeBaseId, KnowledgeImportJobRequest body)
        {
             ApiResponse<KnowledgeImportJobResponse> localVarResponse = await PostKnowledgeKnowledgebaseImportJobsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create import job 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImportJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImportJobResponse>> PostKnowledgeKnowledgebaseImportJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeImportJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseImportJobs");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseImportJobs");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseImportJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseImportJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImportJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImportJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImportJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create new label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>LabelResponse</returns>
        
        public LabelResponse PostKnowledgeKnowledgebaseLabels (string knowledgeBaseId, LabelCreateRequest body)
        {
             ApiResponse<LabelResponse> localVarResponse = PostKnowledgeKnowledgebaseLabelsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LabelResponse</returns>
        
        public ApiResponse< LabelResponse > PostKnowledgeKnowledgebaseLabelsWithHttpInfo (string knowledgeBaseId, LabelCreateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLabels");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLabels");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLabels: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLabels: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create new label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of LabelResponse</returns>
        
        public async System.Threading.Tasks.Task<LabelResponse> PostKnowledgeKnowledgebaseLabelsAsync (string knowledgeBaseId, LabelCreateRequest body)
        {
             ApiResponse<LabelResponse> localVarResponse = await PostKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new label 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PostKnowledgeKnowledgebaseLabelsAsyncWithHttpInfo (string knowledgeBaseId, LabelCreateRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLabels");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLabels");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLabels: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLabels: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarHeaders,
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeExtendedCategory</returns>
        [Obsolete]
        public KnowledgeExtendedCategory PostKnowledgeKnowledgebaseLanguageCategories (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = PostKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public ApiResponse< KnowledgeExtendedCategory > PostKnowledgeKnowledgebaseLanguageCategoriesWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeExtendedCategory</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeExtendedCategory> PostKnowledgeKnowledgebaseLanguageCategoriesAsync (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        {
             ApiResponse<KnowledgeExtendedCategory> localVarResponse = await PostKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new category 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeExtendedCategory)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeExtendedCategory>> PostKnowledgeKnowledgebaseLanguageCategoriesAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeCategoryRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageCategories");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeExtendedCategory>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeExtendedCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeExtendedCategory)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Upload Article Content 
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public KnowledgeDocumentContentUpload PostKnowledgeKnowledgebaseLanguageDocumentUploads (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body)
        {
             ApiResponse<KnowledgeDocumentContentUpload> localVarResponse = PostKnowledgeKnowledgebaseLanguageDocumentUploadsWithHttpInfo(documentId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Article Content 
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocumentContentUpload > PostKnowledgeKnowledgebaseLanguageDocumentUploadsWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentUploads: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentUploads: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentContentUpload>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentContentUpload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentContentUpload)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Upload Article Content 
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocumentContentUpload</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocumentContentUpload> PostKnowledgeKnowledgebaseLanguageDocumentUploadsAsync (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body)
        {
             ApiResponse<KnowledgeDocumentContentUpload> localVarResponse = await PostKnowledgeKnowledgebaseLanguageDocumentUploadsAsyncWithHttpInfo(documentId, knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Article Content 
        /// 
        /// PostKnowledgeKnowledgebaseLanguageDocumentUploads is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document ID</param>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocumentContentUpload)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocumentContentUpload>> PostKnowledgeKnowledgebaseLanguageDocumentUploadsAsyncWithHttpInfo (string documentId, string knowledgeBaseId, string languageCode, KnowledgeDocumentContentUpload body)
        { 
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentUploads");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId));
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentUploads: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentUploads: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocumentContentUpload>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocumentContentUpload) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocumentContentUpload)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeDocument</returns>
        [Obsolete]
        public KnowledgeDocument PostKnowledgeKnowledgebaseLanguageDocuments (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = PostKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeDocument</returns>
        [Obsolete]
        public ApiResponse< KnowledgeDocument > PostKnowledgeKnowledgebaseLanguageDocumentsWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeDocument</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeDocument> PostKnowledgeKnowledgebaseLanguageDocumentsAsync (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        {
             ApiResponse<KnowledgeDocument> localVarResponse = await PostKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create document 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeDocument)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeDocument>> PostKnowledgeKnowledgebaseLanguageDocumentsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeDocumentRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocuments");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocuments: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeDocument>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeDocument)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeImport</returns>
        [Obsolete]
        public KnowledgeImport PostKnowledgeKnowledgebaseLanguageDocumentsImports (string knowledgeBaseId, string languageCode, KnowledgeImport body)
        {
             ApiResponse<KnowledgeImport> localVarResponse = PostKnowledgeKnowledgebaseLanguageDocumentsImportsWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeImport</returns>
        [Obsolete]
        public ApiResponse< KnowledgeImport > PostKnowledgeKnowledgebaseLanguageDocumentsImportsWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeImport body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentsImports: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentsImports: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeImport</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeImport> PostKnowledgeKnowledgebaseLanguageDocumentsImportsAsync (string knowledgeBaseId, string languageCode, KnowledgeImport body)
        {
             ApiResponse<KnowledgeImport> localVarResponse = await PostKnowledgeKnowledgebaseLanguageDocumentsImportsAsyncWithHttpInfo(knowledgeBaseId, languageCode, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create import operation 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeImport)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeImport>> PostKnowledgeKnowledgebaseLanguageDocumentsImportsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, KnowledgeImport body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageDocumentsImports");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentsImports: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageDocumentsImports: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeImport>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeImport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeImport)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Promote trained documents from draft state to active. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        public KnowledgeTraining PostKnowledgeKnowledgebaseLanguageTrainingPromote (string knowledgeBaseId, string languageCode, string trainingId)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = PostKnowledgeKnowledgebaseLanguageTrainingPromoteWithHttpInfo(knowledgeBaseId, languageCode, trainingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Promote trained documents from draft state to active. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        public ApiResponse< KnowledgeTraining > PostKnowledgeKnowledgebaseLanguageTrainingPromoteWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");
            // verify the required parameter 'trainingId' is set
            if (trainingId == null)
                throw new ApiException(400, "Missing required parameter 'trainingId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (trainingId != null) localVarPathParams.Add("trainingId", this.Configuration.ApiClient.ParameterToString(trainingId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainingPromote: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainingPromote: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Promote trained documents from draft state to active. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingPromoteAsync (string knowledgeBaseId, string languageCode, string trainingId)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = await PostKnowledgeKnowledgebaseLanguageTrainingPromoteAsyncWithHttpInfo(knowledgeBaseId, languageCode, trainingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Promote trained documents from draft state to active. 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <param name="trainingId">Training ID</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> PostKnowledgeKnowledgebaseLanguageTrainingPromoteAsyncWithHttpInfo (string knowledgeBaseId, string languageCode, string trainingId)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");
            
            // verify the required parameter 'trainingId' is set
            if (trainingId == null)
                throw new ApiException(400, "Missing required parameter 'trainingId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainingPromote");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));
            if (trainingId != null) localVarPathParams.Add("trainingId", this.Configuration.ApiClient.ParameterToString(trainingId));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainingPromote: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainingPromote: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Trigger training 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>KnowledgeTraining</returns>
        [Obsolete]
        public KnowledgeTraining PostKnowledgeKnowledgebaseLanguageTrainings (string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = PostKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo(knowledgeBaseId, languageCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger training 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>ApiResponse of KnowledgeTraining</returns>
        [Obsolete]
        public ApiResponse< KnowledgeTraining > PostKnowledgeKnowledgebaseLanguageTrainingsWithHttpInfo (string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainings");
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainings");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Trigger training 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of KnowledgeTraining</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeTraining> PostKnowledgeKnowledgebaseLanguageTrainingsAsync (string knowledgeBaseId, string languageCode)
        {
             ApiResponse<KnowledgeTraining> localVarResponse = await PostKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo(knowledgeBaseId, languageCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trigger training 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="languageCode">Language code, format: iso2-LOCALE</param>
        /// <returns>Task of ApiResponse (KnowledgeTraining)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeTraining>> PostKnowledgeKnowledgebaseLanguageTrainingsAsyncWithHttpInfo (string knowledgeBaseId, string languageCode)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainings");
            
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling KnowledgeApi->PostKnowledgeKnowledgebaseLanguageTrainings");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (languageCode != null) localVarPathParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode));

            // Query params

            // Header params

            // Form params
            
            // Body param


            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseLanguageTrainings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeTraining>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeTraining) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeTraining)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Import the parsed articles 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns></returns>
        
        public void PostKnowledgeKnowledgebaseParseJobImport (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body)
        {
             PostKnowledgeKnowledgebaseParseJobImportWithHttpInfo(knowledgeBaseId, parseJobId, body);
        }

        /// <summary>
        /// Import the parsed articles 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        
        public ApiResponse<Object> PostKnowledgeKnowledgebaseParseJobImportWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Import the parsed articles 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        
        public async System.Threading.Tasks.Task PostKnowledgeKnowledgebaseParseJobImportAsync (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body)
        {
             await PostKnowledgeKnowledgebaseParseJobImportAsyncWithHttpInfo(knowledgeBaseId, parseJobId, body);

        }

        /// <summary>
        /// Import the parsed articles 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobImport is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="parseJobId">Parse job ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostKnowledgeKnowledgebaseParseJobImportAsyncWithHttpInfo (string knowledgeBaseId, string parseJobId, KnowledgeParseJobRequestImport body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");
            
            // verify the required parameter 'parseJobId' is set
            if (parseJobId == null)
                throw new ApiException(400, "Missing required parameter 'parseJobId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobImport");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));
            if (parseJobId != null) localVarPathParams.Add("parseJobId", this.Configuration.ApiClient.ParameterToString(parseJobId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobImport: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobImport: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<Object>(localVarStatusCode,
                localVarHeaders,
                null,
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create parse job 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>KnowledgeParseJobResponse</returns>
        
        public KnowledgeParseJobResponse PostKnowledgeKnowledgebaseParseJobs (string knowledgeBaseId, KnowledgeParseJobRequest body)
        {
             ApiResponse<KnowledgeParseJobResponse> localVarResponse = PostKnowledgeKnowledgebaseParseJobsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create parse job 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeParseJobResponse</returns>
        
        public ApiResponse< KnowledgeParseJobResponse > PostKnowledgeKnowledgebaseParseJobsWithHttpInfo (string knowledgeBaseId, KnowledgeParseJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobs");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobs");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeParseJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeParseJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeParseJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create parse job 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeParseJobResponse</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeParseJobResponse> PostKnowledgeKnowledgebaseParseJobsAsync (string knowledgeBaseId, KnowledgeParseJobRequest body)
        {
             ApiResponse<KnowledgeParseJobResponse> localVarResponse = await PostKnowledgeKnowledgebaseParseJobsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create parse job 
        /// 
        /// PostKnowledgeKnowledgebaseParseJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeParseJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeParseJobResponse>> PostKnowledgeKnowledgebaseParseJobsAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeParseJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobs");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseParseJobs");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseParseJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeParseJobResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeParseJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeParseJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Search Documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KnowledgeSearchResponse</returns>
        [Obsolete]
        public KnowledgeSearchResponse PostKnowledgeKnowledgebaseSearch (string knowledgeBaseId, KnowledgeSearchRequest body = null)
        {
             ApiResponse<KnowledgeSearchResponse> localVarResponse = PostKnowledgeKnowledgebaseSearchWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KnowledgeSearchResponse</returns>
        [Obsolete]
        public ApiResponse< KnowledgeSearchResponse > PostKnowledgeKnowledgebaseSearchWithHttpInfo (string knowledgeBaseId, KnowledgeSearchRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseSearch");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeSearchResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeSearchResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Search Documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of KnowledgeSearchResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<KnowledgeSearchResponse> PostKnowledgeKnowledgebaseSearchAsync (string knowledgeBaseId, KnowledgeSearchRequest body = null)
        {
             ApiResponse<KnowledgeSearchResponse> localVarResponse = await PostKnowledgeKnowledgebaseSearchAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Documents 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (KnowledgeSearchResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeSearchResponse>> PostKnowledgeKnowledgebaseSearchAsyncWithHttpInfo (string knowledgeBaseId, KnowledgeSearchRequest body = null)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseSearch");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseSearch: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseSearch: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeSearchResponse>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeSearchResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create content upload from URL job 
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>CreateUploadSourceUrlJobResponse</returns>
        
        public CreateUploadSourceUrlJobResponse PostKnowledgeKnowledgebaseUploadsUrlsJobs (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body)
        {
             ApiResponse<CreateUploadSourceUrlJobResponse> localVarResponse = PostKnowledgeKnowledgebaseUploadsUrlsJobsWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create content upload from URL job 
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>ApiResponse of CreateUploadSourceUrlJobResponse</returns>
        
        public ApiResponse< CreateUploadSourceUrlJobResponse > PostKnowledgeKnowledgebaseUploadsUrlsJobsWithHttpInfo (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseUploadsUrlsJobs");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseUploadsUrlsJobs");

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseUploadsUrlsJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseUploadsUrlsJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CreateUploadSourceUrlJobResponse>(localVarStatusCode,
                localVarHeaders,
                (CreateUploadSourceUrlJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUploadSourceUrlJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create content upload from URL job 
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>Task of CreateUploadSourceUrlJobResponse</returns>
        
        public async System.Threading.Tasks.Task<CreateUploadSourceUrlJobResponse> PostKnowledgeKnowledgebaseUploadsUrlsJobsAsync (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body)
        {
             ApiResponse<CreateUploadSourceUrlJobResponse> localVarResponse = await PostKnowledgeKnowledgebaseUploadsUrlsJobsAsyncWithHttpInfo(knowledgeBaseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create content upload from URL job 
        /// 
        /// PostKnowledgeKnowledgebaseUploadsUrlsJobs is a preview method and is subject to both breaking and non-breaking changes at any time without notice
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeBaseId">Knowledge base ID</param>
        /// <param name="body">uploadRequest</param>
        /// <returns>Task of ApiResponse (CreateUploadSourceUrlJobResponse)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<CreateUploadSourceUrlJobResponse>> PostKnowledgeKnowledgebaseUploadsUrlsJobsAsyncWithHttpInfo (string knowledgeBaseId, CreateUploadSourceUrlJobRequest body)
        { 
            // verify the required parameter 'knowledgeBaseId' is set
            if (knowledgeBaseId == null)
                throw new ApiException(400, "Missing required parameter 'knowledgeBaseId' when calling KnowledgeApi->PostKnowledgeKnowledgebaseUploadsUrlsJobs");
            
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebaseUploadsUrlsJobs");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params
            if (knowledgeBaseId != null) localVarPathParams.Add("knowledgeBaseId", this.Configuration.ApiClient.ParameterToString(knowledgeBaseId));

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseUploadsUrlsJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebaseUploadsUrlsJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<CreateUploadSourceUrlJobResponse>(localVarStatusCode,
                localVarHeaders,
                (CreateUploadSourceUrlJobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUploadSourceUrlJobResponse)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



        /// <summary>
        /// Create new knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>KnowledgeBase</returns>
        
        public KnowledgeBase PostKnowledgeKnowledgebases (KnowledgeBaseCreateRequest body)
        {
             ApiResponse<KnowledgeBase> localVarResponse = PostKnowledgeKnowledgebasesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of KnowledgeBase</returns>
        
        public ApiResponse< KnowledgeBase > PostKnowledgeKnowledgebasesWithHttpInfo (KnowledgeBaseCreateRequest body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebases");

            var localVarPath = "/api/v2/knowledge/knowledgebases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"
                

            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }


        /// <summary>
        /// Create new knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of KnowledgeBase</returns>
        
        public async System.Threading.Tasks.Task<KnowledgeBase> PostKnowledgeKnowledgebasesAsync (KnowledgeBaseCreateRequest body)
        {
             ApiResponse<KnowledgeBase> localVarResponse = await PostKnowledgeKnowledgebasesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new knowledge base 
        /// 
        /// </summary>
        /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (KnowledgeBase)</returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<KnowledgeBase>> PostKnowledgeKnowledgebasesAsyncWithHttpInfo (KnowledgeBaseCreateRequest body)
        { 
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KnowledgeApi->PostKnowledgeKnowledgebases");
            

            var localVarPath = "/api/v2/knowledge/knowledgebases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<Tuple<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
                
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {

                "application/json"

                
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // Path params

            // Query params

            // Header params

            // Form params
            
            // Body param
            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array



            // authentication (PureCloud OAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                             .Select(header => new
                                                         {
                                                            Name = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Name"),
                                                            Value = Extensions.ReflectionUtils.GetSafePropertyValue(header, "Value")
                                                            }).ToDictionary(header => header?.Name?.ToString(), header => header?.Value?.ToString()) 
                                                        ?? new Dictionary<string, string>();

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling PostKnowledgeKnowledgebases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KnowledgeBase>(localVarStatusCode,
                localVarHeaders,
                (KnowledgeBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KnowledgeBase)),
                localVarResponse.Content,
                localVarResponse.StatusDescription);
        }



    }

}
