using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetAnalyticsBotflowSessionsExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new AnalyticsApi();
            var botFlowId = "botFlowId_example";  // string | ID of the bot flow.
            var after = "after_example";  // string | The cursor that points to the ID of the last item in the list of entities that has been returned. (optional) 
            var pageSize = "pageSize_example";  // string | Max number of entities to return. Maximum of 250 (optional)  (default to "50")
            var interval = "2023-07-17T08:15:44.586Z/2023-07-26T09:22:33.111Z";  // string | Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: '2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07'. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional) 
            var botResultCategories = "botResultCategories_example";  // string | Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by. (optional) 
            var endLanguage = "endLanguage_example";  // string | Optional case-insensitive language code to filter sessions by the language the sessions ended in. (optional) 

            try
            { 
                // Get Bot Flow Sessions.
                SessionsResponse result = apiInstance.GetAnalyticsBotflowSessions(botFlowId, after, pageSize, interval, botResultCategories, endLanguage);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling Analytics.GetAnalyticsBotflowSessions: " + e.Message );
            }
        }
    }
}