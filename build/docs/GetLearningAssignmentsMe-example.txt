using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetLearningAssignmentsMeExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new LearningApi();
            var moduleId = "moduleId_example";  // string | Specifies the ID of the learning module. Fetch assignments for learning module ID (optional) 
            var interval = "interval_example";  // string | Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional) 
            var completionInterval = "completionInterval_example";  // string | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional) 
            var overdue = "overdue_example";  // string | Specifies if only the non-overdue (overdue is \"False\") or overdue (overdue is \"True\") assignments are returned. If overdue is \"Any\" or if the overdue parameter is not supplied, all assignments are returned (optional)  (default to Any)
            var pageSize = 56;  // int? | Page size (optional)  (default to 25)
            var pageNumber = 56;  // int? | Page number (optional)  (default to 1)
            var pass = "pass_example";  // string | Specifies if only the failed (pass is \"False\") or passed (pass is \"True\") assignments (completed with assessment)are returned. If pass is \"Any\" or if the pass parameter is not supplied, all assignments are returned (optional)  (default to Any)
            var minPercentageScore = 3.4F;  // float? | The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional) 
            var maxPercentageScore = 3.4F;  // float? | The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional) 
            var sortOrder = "sortOrder_example";  // string | Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional)  (default to Desc)
            var sortBy = "sortBy_example";  // string | Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional) 
            var types = new List<string>(); // List<string> | Specifies the module types to filter by. Informational, AssessedContent and Assessment are deprecated (optional) 
            var states = new List<string>(); // List<string> | Specifies the assignment states to filter by (optional) 
            var expand = new List<string>(); // List<string> | Specifies the expand option for returning additional information (optional) 

            try
            { 
                // List of Learning Assignments assigned to current user
                LearningAssignmentsDomainEntity result = apiInstance.GetLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling Learning.GetLearningAssignmentsMe: " + e.Message );
            }
        }
    }
}