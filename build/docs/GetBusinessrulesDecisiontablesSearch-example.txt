using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetBusinessrulesDecisiontablesSearchExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new BusinessRulesApi();
            var after = "after_example";  // string | The cursor that points to the end of the set of entities that has been returned. (optional) 
            var pageSize = "pageSize_example";  // string | Number of entities to return. Maximum of 100. (optional) 
            var schemaId = "schemaId_example";  // string | Search for decision tables that use the schema with this ID. Cannot be combined with name search. Search results will not be paginated if used. (optional) 
            var name = "name_example";  // string | Search for decision tables with a name that contains the given search string. Search is case insensitive and will match any table that contains this string in any part of the name. Cannot be combined with schema search. Search results will not be paginated if used. (optional) 
            var withPublishedVersion = true;  // bool? | Filters results to only decision tables that have at least one version in Published status (optional) 
            var expand = new List<string>(); // List<string> | Fields to expand in response (optional) 
            var ids = new List<string>(); // List<string> | Decision table IDs to search for (optional) 

            try
            { 
                // Search for decision tables.
                DecisionTableListing result = apiInstance.GetBusinessrulesDecisiontablesSearch(after, pageSize, schemaId, name, withPublishedVersion, expand, ids);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling BusinessRules.GetBusinessrulesDecisiontablesSearch: " + e.Message );
            }
        }
    }
}