using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetCoachingAppointmentsMeExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new CoachingApi();
            var interval = "interval_example";  // string | Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional) 
            var pageNumber = 56;  // int? | Page number (optional)  (default to 1)
            var pageSize = 56;  // int? | Page size (optional)  (default to 25)
            var statuses = new List<string>(); // List<string> | Appointment Statuses to filter by (optional) 
            var facilitatorIds = new List<string>(); // List<string> | The facilitator IDs for which to retrieve appointments (optional) 
            var sortOrder = "sortOrder_example";  // string | Sort (by due date) either Asc or Desc (optional) 
            var relationships = new List<string>(); // List<string> | Relationships to filter by (optional) 
            var completionInterval = "completionInterval_example";  // string | Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional) 
            var overdue = "overdue_example";  // string | Overdue status to filter by (optional) 
            var intervalCondition = "intervalCondition_example";  // string | Filter condition for interval (optional) 

            try
            { 
                // Get my appointments for a given date range
                CoachingAppointmentResponseList result = apiInstance.GetCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling Coaching.GetCoachingAppointmentsMe: " + e.Message );
            }
        }
    }
}