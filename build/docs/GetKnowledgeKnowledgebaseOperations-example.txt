using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetKnowledgeKnowledgebaseOperationsExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new KnowledgeApi();
            var knowledgeBaseId = "knowledgeBaseId_example";  // string | Knowledge base ID
            var before = "before_example";  // string | The cursor that points to the start of the set of entities that has been returned. (optional) 
            var after = "after_example";  // string | The cursor that points to the end of the set of entities that has been returned. (optional) 
            var pageSize = "pageSize_example";  // string | Number of entities to return. Maximum of 200. (optional) 
            var userId = new List<string>(); // List<string> | If specified, retrieves operations associated with user ids, comma separated values expected. (optional) 
            var type = new List<string>(); // List<string> | If specified, retrieves operations with specified operation type, comma separated values expected. (optional) 
            var status = new List<string>(); // List<string> | If specified, retrieves operations with specified operation status, comma separated values expected. (optional) 
            var interval = "interval_example";  // string | Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ (optional) 
            var sourceId = new List<string>(); // List<string> | If specified, retrieves operations associated with source ids, comma separated values expected. (optional) 

            try
            { 
                // Get operations
                OperationListing result = apiInstance.GetKnowledgeKnowledgebaseOperations(knowledgeBaseId, before, after, pageSize, userId, type, status, interval, sourceId);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling Knowledge.GetKnowledgeKnowledgebaseOperations: " + e.Message );
            }
        }
    }
}