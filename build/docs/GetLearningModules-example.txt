using System;
using System.Diagnostics;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Model;
using PureCloudPlatform.Client.V2.Extensions;

namespace Example
{
    public class GetLearningModulesExample
    {
        static void Main(string[] args)
        {   
            PureCloudRegionHosts region = PureCloudRegionHosts.us_east_1; // Genesys Cloud region
            Configuration.Default.ApiClient.setBasePath(region);
            
            // Configure OAuth2 access token for authorization: PureCloud OAuth
            // The following example is using the Client Credentials Grant
            var accessTokenInfo = Configuration.Default.ApiClient.PostToken("your_client_credential_grant_id", "your_client_credential_grant_secret");

            var apiInstance = new LearningApi();
            var isArchived = true;  // bool? | Archive status (optional)  (default to false)
            var types = new List<string>(); // List<string> | Specifies the module types. Informational, AssessedContent and Assessment are deprecated (optional) 
            var pageSize = 56;  // int? | Page size (optional)  (default to 25)
            var pageNumber = 56;  // int? | Page number (optional)  (default to 1)
            var sortOrder = "sortOrder_example";  // string | Sort order (optional)  (default to ascending)
            var sortBy = "sortBy_example";  // string | Sort by (optional)  (default to name)
            var searchTerm = "searchTerm_example";  // string | Search Term (searchable by name) (optional) 
            var expand = new List<string>(); // List<string> | Fields to expand in response(case insensitive) (optional) 
            var isPublished = "isPublished_example";  // string | Specifies if only the Unpublished (isPublished is \"False\") or Published (isPublished is \"True\") modules are returned. If isPublished is \"Any\" or omitted, both types are returned (optional)  (default to Any)
            var statuses = new List<string>(); // List<string> | Specifies the module statuses to filter by (optional) 
            var externalIds = new List<string>(); // List<string> | Specifies the module external IDs to filter by. Only one ID is allowed (optional) 

            try
            { 
                // Get all learning modules of an organization
                LearningModulesDomainEntityListing result = apiInstance.GetLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished, statuses, externalIds);
                Debug.WriteLine(result);
            }
            catch (Exception e)
            {
                Debug.Print("Exception when calling Learning.GetLearningModules: " + e.Message );
            }
        }
    }
}